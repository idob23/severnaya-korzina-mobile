// lib/services/update_service.dart
// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—Ä–æ–±–ª–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

import 'dart:io';
import 'dart:math';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:open_file/open_file.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/api_service.dart';
import 'package:flutter/services.dart';
import 'package:crypto/crypto.dart';
import 'dart:convert';

class UpdateService {
  static final UpdateService _instance = UpdateService._internal();
  factory UpdateService() => _instance;
  UpdateService._internal();

  PackageInfo? _packageInfo;
  CancelToken? _currentDownloadToken;

  String get baseUrl => ApiService.baseUrl.replaceAll('/api', '');
  UpdateInfo? _availableUpdate;
  Function(double)? onDownloadProgress;

  // –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö APK —Ñ–∞–π–ª–æ–≤
  Future<void> _cleanOldApkFiles() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≥–¥–µ –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è APK
      final List<Directory?> directories = [
        await getExternalStorageDirectory(),
        await getApplicationDocumentsDirectory(),
        await getTemporaryDirectory(),
      ];

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–∞–ø–∫—É Downloads
      final downloadsDir = Directory('/storage/emulated/0/Download/');
      if (await downloadsDir.exists()) {
        directories.add(downloadsDir);
      }

      for (final dir in directories) {
        if (dir == null) continue;

        // –ò—â–µ–º –≤—Å–µ APK —Ñ–∞–π–ª—ã –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        final files = dir.listSync().where((item) =>
            item.path.contains('severnaya') && item.path.endsWith('.apk'));

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        for (final file in files) {
          try {
            if (file is File) {
              await file.delete();
              print('üóëÔ∏è Deleted old APK: ${file.path}');
            }
          } catch (e) {
            print('‚ö†Ô∏è Could not delete: ${file.path}');
          }
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è Error cleaning old APK files: $e');
    }
  }

  // –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  String _generateUniqueFileName(String version) {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = Random().nextInt(9999);
    return 'severnaya_korzina_${version}_${timestamp}_$random.apk';
  }

  // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  Future<bool> _verifyApkIntegrity(File file, double expectedSizeMb) async {
    try {
      final fileSize = await file.length();
      final fileSizeMb = fileSize / (1024 * 1024);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä (–¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 10%)
      final minSize = expectedSizeMb * 0.9;
      final maxSize = expectedSizeMb * 1.1;

      if (fileSizeMb < minSize || fileSizeMb > maxSize) {
        print(
            '‚ùå APK size mismatch: ${fileSizeMb}MB, expected ~${expectedSizeMb}MB');
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å PK (ZIP signature –¥–ª—è APK)
      final bytes = await file.openRead(0, 4).first;
      if (bytes[0] != 0x50 || bytes[1] != 0x4B) {
        print('‚ùå Invalid APK signature');
        return false;
      }

      print('‚úÖ APK verified: ${fileSizeMb.toStringAsFixed(1)}MB');
      return true;
    } catch (e) {
      print('‚ùå Error verifying APK: $e');
      return false;
    }
  }

  Future<void> init() async {
    try {
      _packageInfo = await PackageInfo.fromPlatform();
      print('üì± UpdateService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      print(
          'üì± –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${_packageInfo?.version} (build: ${_packageInfo?.buildNumber})');

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ APK –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      await _cleanOldApkFiles();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UpdateService: $e');
      _packageInfo = null;
    }
  }

  String get currentVersion => _packageInfo?.version ?? '1.0.0';
  String get currentBuildNumber => _packageInfo?.buildNumber ?? '1';

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ checkForUpdate - —É–±–∏—Ä–∞–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–ø—É—Å–∫–∞
  Future<UpdateInfo?> checkForUpdate({bool silent = false}) async {
    try {
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
      if (_packageInfo == null) {
        print('‚ö†Ô∏è PackageInfo –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
        await init();
      }

      final dio = Dio();

      print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
      print('üì± –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $currentVersion (build: $currentBuildNumber)');
      print('üåê URL –ø—Ä–æ–≤–µ—Ä–∫–∏: $baseUrl/api/app/version');

      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
      final response = await dio.get(
        '$baseUrl/api/app/version',
        queryParameters: {
          'current_version': currentVersion,
          'current_build': currentBuildNumber,
          'platform': Platform.isAndroid ? 'android' : 'ios',
          'timestamp': DateTime.now().millisecondsSinceEpoch,
        },
        options: Options(
          headers: {
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
          },
          receiveTimeout: Duration(seconds: 10),
          sendTimeout: Duration(seconds: 10),
        ),
      );

      print('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = response.data;
        print('üì¶ –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞: $data');

        if (data['update_available'] == true) {
          print('üéØ –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û–°–¢–£–ü–ù–û!');
          print('üì¶ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${data['latest_version']}');
          print('üì¶ –†–∞–∑–º–µ—Ä: ${data['size_mb']} MB');
          print('üì¶ URL –∑–∞–≥—Ä—É–∑–∫–∏: ${data['download_url']}');

          _availableUpdate = UpdateInfo.fromJson(data);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(
              'last_update_check', DateTime.now().toIso8601String());
          await prefs.setString('available_version', data['latest_version']);

          return _availableUpdate;
        } else {
          print('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç');
        }
      }

      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: $e');
      if (e is DioError) {
        print('‚ùå DioError —Ç–∏–ø: ${e.type}');
        print('‚ùå DioError —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e.message}');
        print('‚ùå DioError –æ—Ç–≤–µ—Ç: ${e.response}');
      }
      return null;
    }
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
  Future<void> showUpdateDialog(
      BuildContext context, UpdateInfo updateInfo) async {
    await showDialog(
      context: context,
      barrierDismissible: false, // –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
      builder: (BuildContext context) {
        return WillPopScope(
          onWillPop: () async => false, // –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
          child: AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(15),
            ),
            title: Row(
              children: [
                Icon(Icons.system_update, color: Colors.blue, size: 28),
                SizedBox(width: 12),
                Expanded(
                  child: Text(
                    '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                    style: TextStyle(fontSize: 20),
                  ),
                ),
              ],
            ),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Text(
                        '–í–µ—Ä—Å–∏—è ${updateInfo.latestVersion}',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.blue,
                        ),
                      ),
                      SizedBox(width: 8),
                      Container(
                        padding:
                            EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                        decoration: BoxDecoration(
                          color: Colors.red[100],
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.red[700],
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 4),
                  Text(
                    '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $currentVersion',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey[600],
                    ),
                  ),
                  if (updateInfo.sizeMb > 0) ...[
                    SizedBox(height: 4),
                    Text(
                      '–†–∞–∑–º–µ—Ä: ${updateInfo.sizeMb.toStringAsFixed(1)} –ú–ë',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                  if (updateInfo.releaseDate.isNotEmpty) ...[
                    Text(
                      '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: ${updateInfo.releaseDate}',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey[600],
                      ),
                    ),
                  ],
                  SizedBox(height: 16),

                  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                  Container(
                    padding: EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.orange[50],
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.orange[300]!),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.warning,
                            color: Colors.orange[700], size: 20),
                        SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                            style: TextStyle(
                              fontSize: 13,
                              color: Colors.orange[900],
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),

                  if (updateInfo.message.isNotEmpty) ...[
                    SizedBox(height: 12),
                    Text(
                      updateInfo.message,
                      style: TextStyle(fontSize: 14),
                    ),
                  ],

                  if (updateInfo.showChangelog &&
                      updateInfo.changelog.isNotEmpty) ...[
                    SizedBox(height: 12),
                    Text(
                      '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:',
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: 15,
                      ),
                    ),
                    SizedBox(height: 8),
                    Container(
                      constraints: BoxConstraints(maxHeight: 200),
                      child: SingleChildScrollView(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: updateInfo.changelog
                              .map((item) => Padding(
                                    padding: EdgeInsets.only(bottom: 4),
                                    child: Row(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Text('‚Ä¢ ',
                                            style: TextStyle(
                                                color: Colors.blue,
                                                fontWeight: FontWeight.bold)),
                                        Expanded(
                                          child: Text(
                                            item,
                                            style: TextStyle(fontSize: 13),
                                          ),
                                        ),
                                      ],
                                    ),
                                  ))
                              .toList(),
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
            actions: [
              // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ - –û–±–Ω–æ–≤–∏—Ç—å
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: () {
                    Navigator.of(context).pop();
                    _downloadAndInstallUpdate(context, updateInfo);
                  },
                  icon: Icon(Icons.download, size: 20),
                  label: Text('–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: EdgeInsets.symmetric(vertical: 12),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Future<void> _downloadAndInstallUpdate(
    BuildContext context,
    UpdateInfo updateInfo,
  ) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if (Platform.isAndroid) {
      final status = await Permission.requestInstallPackages.status;
      if (!status.isGranted) {
        final result = await Permission.requestInstallPackages.request();
        if (!result.isGranted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                  '–†–∞–∑—Ä–µ—à–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'),
              duration: Duration(seconds: 5),
              action: SnackBarAction(
                label: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                onPressed: () => openAppSettings(),
              ),
            ),
          );
          return;
        }
      }
    }

    // –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ APK –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
    await _cleanOldApkFiles();

    final dio = Dio();
    _currentDownloadToken = CancelToken();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    bool downloadCancelled = false;
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return WillPopScope(
          onWillPop: () async => false,
          child: _DownloadProgressDialog(
            updateInfo: updateInfo,
            onCancel: () {
              downloadCancelled = true;
              _currentDownloadToken?.cancel('User cancelled download');
              Navigator.of(context).pop();
            },
          ),
        );
      },
    );

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
      Directory? dir = await getExternalStorageDirectory();
      if (dir == null) {
        dir = await getApplicationDocumentsDirectory();
      }

      // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      final fileName = _generateUniqueFileName(updateInfo.latestVersion);
      final filePath = '${dir.path}/$fileName';

      print('üì± Downloading APK to: $filePath');

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
      final file = File(filePath);
      if (await file.exists()) {
        await file.delete();
      }

      // –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ URL –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
      final downloadUrl =
          '${updateInfo.downloadUrl}?t=${DateTime.now().millisecondsSinceEpoch}';

      // –°–∫–∞—á–∏–≤–∞–µ–º APK
      await dio.download(
        downloadUrl,
        filePath,
        onReceiveProgress: (received, total) {
          if (total != -1 && !downloadCancelled) {
            final progress = received / total;
            onDownloadProgress?.call(progress);
          }
        },
        cancelToken: _currentDownloadToken,
        options: Options(
          headers: {
            'Accept': '*/*',
            'Connection': 'keep-alive',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
          },
          responseType: ResponseType.bytes,
          followRedirects: true,
        ),
      );

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
      if (context.mounted) {
        Navigator.of(context).pop();
      }

      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
      if (!await file.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      }

      if (!await _verifyApkIntegrity(file, updateInfo.sizeMb)) {
        await file.delete();
        throw Exception('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.white),
                SizedBox(width: 12),
                Expanded(child: Text('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')),
              ],
            ),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
      }

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
      await Future.delayed(Duration(seconds: 1));

      // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      final result = await OpenFile.open(
        filePath,
        type: 'application/vnd.android.package-archive',
      );

      print('üì± OpenFile result: ${result.type} - ${result.message}');

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (result.type != ResultType.done) {
        if (context.mounted) {
          _showManualInstallDialog(context, filePath, fileName);
        }
      }
    } on DioError catch (e) {
      if (e.type == DioErrorType.cancel) {
        print('üì± Download cancelled by user');
        _currentDownloadToken = null;

        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'),
              duration: Duration(seconds: 2),
            ),
          );
        }
      } else {
        print('‚ùå DioError downloading update: $e');
        _handleDownloadError(context, e.toString(), updateInfo);
      }
    } catch (e) {
      print('‚ùå Error downloading/installing update: $e');
      _handleDownloadError(context, e.toString(), updateInfo);
    } finally {
      _currentDownloadToken = null;
    }
  }

  void _showManualInstallDialog(
      BuildContext context, String filePath, String fileName) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(Icons.check_circle, color: Colors.green, size: 48),
            SizedBox(height: 16),
            Text('APK —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!'),
            SizedBox(height: 12),
            Text('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:'),
            SizedBox(height: 8),
            Text('1. –û—Ç–∫—Ä–æ–π—Ç–µ "–§–∞–π–ª—ã" –∏–ª–∏ "–ó–∞–≥—Ä—É–∑–∫–∏"'),
            Text('2. –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª "$fileName"'),
            Text('3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏'),
            SizedBox(height: 12),
            Container(
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:',
                      style:
                          TextStyle(fontSize: 12, fontWeight: FontWeight.bold)),
                  SizedBox(height: 4),
                  Text(filePath,
                      style: TextStyle(fontSize: 11, color: Colors.grey[700])),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _openDownloadsFolder();
            },
            child: Text('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.of(context).pop();
              // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
              await OpenFile.open(
                filePath,
                type: 'application/vnd.android.package-archive',
              );
            },
            child: Text('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'),
          ),
        ],
      ),
    );
  }

  void _handleDownloadError(
      BuildContext context, String error, UpdateInfo updateInfo) {
    if (context.mounted) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Row(
            children: [
              Icon(Icons.error_outline, color: Colors.red),
              SizedBox(width: 8),
              Text('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.'),
              SizedBox(height: 12),
              Text('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:',
                  style: TextStyle(fontWeight: FontWeight.bold)),
              SizedBox(height: 8),
              Text('‚Ä¢ –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'),
              Text('‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ'),
              Text('‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º'),
              SizedBox(height: 12),
              Container(
                padding: EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.red[50],
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  '–û—à–∏–±–∫–∞: ${error.length > 100 ? error.substring(0, 100) + '...' : error}',
                  style: TextStyle(fontSize: 11, color: Colors.red[900]),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _downloadAndInstallUpdate(context, updateInfo);
              },
              child: Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'),
            ),
          ],
        ),
      );
    }
  }

  Future<void> _openDownloadsFolder() async {
    try {
      const platform = MethodChannel('app.channel.shared.data');
      await platform.invokeMethod('openDownloads');
    } catch (e) {
      print('Could not open downloads folder: $e');
    }
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  Future<bool> shouldShowUpdateDialog() async {
    print(
        'üîç shouldShowUpdateDialog: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${_availableUpdate != null ? "–¥–æ—Å—Ç—É–ø–Ω–æ" : "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}');
    return _availableUpdate != null;
  }
}

// –ú–æ–¥–µ–ª—å –∏ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
class UpdateInfo {
  final bool updateAvailable;
  final bool forceUpdate;
  final String latestVersion;
  final String minVersion;
  final String currentVersion;
  final String downloadUrl;
  final double sizeMb;
  final String releaseDate;
  final List<String> changelog;
  final Map<String, dynamic> features;
  final String message;
  final bool showChangelog;

  UpdateInfo({
    required this.updateAvailable,
    required this.forceUpdate,
    required this.latestVersion,
    required this.minVersion,
    required this.currentVersion,
    required this.downloadUrl,
    required this.sizeMb,
    required this.releaseDate,
    required this.changelog,
    required this.features,
    required this.message,
  }) : showChangelog = features['show_changelog'] ?? true;

  factory UpdateInfo.fromJson(Map<String, dynamic> json) {
    return UpdateInfo(
      updateAvailable: json['update_available'] ?? false,
      forceUpdate: json['force_update'] ?? false,
      latestVersion: json['latest_version'] ?? '',
      minVersion: json['min_version'] ?? '',
      currentVersion: json['current_version'] ?? '',
      downloadUrl: json['download_url'] ?? '',
      sizeMb: (json['size_mb'] ?? 0).toDouble(),
      releaseDate: json['release_date'] ?? '',
      changelog: List<String>.from(json['changelog'] ?? []),
      features: json['features'] ?? {},
      message: json['message'] ?? '',
    );
  }
}

class _DownloadProgressDialog extends StatefulWidget {
  final UpdateInfo updateInfo;
  final VoidCallback onCancel;

  const _DownloadProgressDialog({
    Key? key,
    required this.updateInfo,
    required this.onCancel,
  }) : super(key: key);

  @override
  _DownloadProgressDialogState createState() => _DownloadProgressDialogState();
}

class _DownloadProgressDialogState extends State<_DownloadProgressDialog> {
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    UpdateService().onDownloadProgress = (progress) {
      if (mounted) {
        setState(() {
          _progress = progress;
        });
      }
    };
  }

  @override
  void dispose() {
    UpdateService().onDownloadProgress = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final downloadedMb =
        (widget.updateInfo.sizeMb * _progress).toStringAsFixed(1);
    final totalMb = widget.updateInfo.sizeMb.toStringAsFixed(1);
    final percentage = (_progress * 100).toInt();

    return AlertDialog(
      title: Text('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          LinearProgressIndicator(
            value: _progress,
            minHeight: 8,
          ),
          SizedBox(height: 16),
          Text(
            '$percentage%',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 8),
          Text(
            '$downloadedMb –ú–ë / $totalMb –ú–ë',
            style: TextStyle(color: Colors.grey[600]),
          ),
          if (percentage > 0) ...[
            SizedBox(height: 8),
            Text(
              '–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              style: TextStyle(fontSize: 12, color: Colors.orange),
            ),
          ],
        ],
      ),
      actions: [
        TextButton(
          onPressed: widget.onCancel,
          child: Text('–û—Ç–º–µ–Ω–∞'),
        ),
      ],
    );
  }
}
