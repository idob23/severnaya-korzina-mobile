// lib/services/update_service.dart
// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:open_file/open_file.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/api_service.dart';
import 'package:flutter/services.dart';

class UpdateService {
  static final UpdateService _instance = UpdateService._internal();
  factory UpdateService() => _instance;
  UpdateService._internal();

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ —Ö—Ä–∞–Ω–∏–º Dio –∫–∞–∫ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞
  // Dio –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
  PackageInfo? _packageInfo;

  // –¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
  CancelToken? _currentDownloadToken;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ baseUrl —á—Ç–æ –∏ –≤ ApiService
  String get baseUrl => ApiService.baseUrl.replaceAll('/api', '');

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  UpdateInfo? _availableUpdate;

  // Callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  Function(double)? onDownloadProgress;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> init() async {
    _packageInfo = await PackageInfo.fromPlatform();
    print(
        'üì± App version: ${_packageInfo?.version} (${_packageInfo?.buildNumber})');
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  String get currentVersion => _packageInfo?.version ?? '1.0.0';

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  Future<UpdateInfo?> checkForUpdate({bool silent = false}) async {
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Dio –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      final dio = Dio();

      final response = await dio.get(
        '$baseUrl/api/app/version',
        queryParameters: {
          'current_version': currentVersion,
          'platform': Platform.isAndroid ? 'android' : 'ios',
        },
      );

      if (response.statusCode == 200) {
        final data = response.data;

        if (data['update_available'] == true) {
          _availableUpdate = UpdateInfo.fromJson(data);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString(
              'last_update_check', DateTime.now().toIso8601String());
          await prefs.setString('available_version', data['latest_version']);

          return _availableUpdate;
        }
      }

      return null;
    } catch (e) {
      if (!silent) {
        print('‚ùå Error checking for updates: $e');
      }
      return null;
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Future<void> showUpdateDialog(
      BuildContext context, UpdateInfo updateInfo) async {
    final canSkip = updateInfo.features['can_skip'] ?? true;

    await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return WillPopScope(
          onWillPop: () async => canSkip && !updateInfo.forceUpdate,
          child: AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(15),
            ),
            title: Row(
              children: [
                Icon(Icons.system_update, color: Colors.blue, size: 28),
                SizedBox(width: 12),
                Expanded(
                  child: Text(
                    '–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                    style: TextStyle(fontSize: 20),
                  ),
                ),
              ],
            ),
            content: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Text(
                        '–í–µ—Ä—Å–∏—è ${updateInfo.latestVersion}',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.blue,
                        ),
                      ),
                      SizedBox(width: 8),
                      Container(
                        padding:
                            EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                        decoration: BoxDecoration(
                          color: updateInfo.forceUpdate
                              ? Colors.red[100]
                              : Colors.green[100],
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: Text(
                          updateInfo.forceUpdate ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ' : '–ù–æ–≤–æ–µ',
                          style: TextStyle(
                            fontSize: 12,
                            color: updateInfo.forceUpdate
                                ? Colors.red[800]
                                : Colors.green[800],
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  Text(
                    '–†–∞–∑–º–µ—Ä: ${updateInfo.sizeMb.toStringAsFixed(1)} –ú–ë',
                    style: TextStyle(color: Colors.grey[600], fontSize: 13),
                  ),
                  if (updateInfo.forceUpdate) ...[
                    SizedBox(height: 12),
                    Container(
                      padding: EdgeInsets.all(10),
                      decoration: BoxDecoration(
                        color: Colors.red[50],
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(color: Colors.red[200]!),
                      ),
                      child: Row(
                        children: [
                          Icon(Icons.warning_amber_rounded,
                              color: Colors.red[800], size: 20),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              '–≠—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.',
                              style: TextStyle(
                                  color: Colors.red[800], fontSize: 12),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                  if (updateInfo.showChangelog &&
                      updateInfo.changelog.isNotEmpty) ...[
                    SizedBox(height: 16),
                    Text(
                      '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8),
                    Container(
                      constraints: BoxConstraints(maxHeight: 200),
                      child: SingleChildScrollView(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: updateInfo.changelog
                              .map((item) => Padding(
                                    padding: EdgeInsets.only(bottom: 4),
                                    child: Text(
                                      item,
                                      style: TextStyle(fontSize: 13),
                                    ),
                                  ))
                              .toList(),
                        ),
                      ),
                    ),
                  ],
                ],
              ),
            ),
            actions: [
              if (canSkip && !updateInfo.forceUpdate)
                TextButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ª–æ–∂–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    final prefs = await SharedPreferences.getInstance();
                    await prefs.setString(
                      'update_skipped_date',
                      DateTime.now().toIso8601String(),
                    );
                  },
                  child: Text('–ü–æ–∑–∂–µ'),
                ),
              ElevatedButton(
                onPressed: () {
                  Navigator.of(context).pop();
                  _downloadAndInstallUpdate(context, updateInfo);
                },
                child: Text('–û–±–Ω–æ–≤–∏—Ç—å'),
              ),
            ],
          ),
        );
      },
    );
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Future<void> _downloadAndInstallUpdate(
    BuildContext context,
    UpdateInfo updateInfo,
  ) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if (Platform.isAndroid) {
      final status = await Permission.requestInstallPackages.status;
      if (!status.isGranted) {
        final result = await Permission.requestInstallPackages.request();
        if (!result.isGranted) {
          // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                  '–†–∞–∑—Ä–µ—à–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'),
              duration: Duration(seconds: 5),
              action: SnackBarAction(
                label: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                onPressed: () => openAppSettings(),
              ),
            ),
          );
          return;
        }
      }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Dio –∏ CancelToken –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    final dio = Dio();
    _currentDownloadToken = CancelToken();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    bool downloadCancelled = false;
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return WillPopScope(
          onWillPop: () async => false,
          child: _DownloadProgressDialog(
            updateInfo: updateInfo,
            onCancel: () {
              downloadCancelled = true;
              // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º CancelToken –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è Dio
              _currentDownloadToken?.cancel('User cancelled download');
              Navigator.of(context).pop();
            },
          ),
        );
      },
    );

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      Directory? dir;

      // –î–ª—è Android 10+ –∏—Å–ø–æ–ª—å–∑—É–µ–º getExternalStorageDirectory
      if (Platform.isAndroid) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
        dir = await getExternalStorageDirectory();
        if (dir == null) {
          dir = await getApplicationDocumentsDirectory();
        }
      } else {
        dir = await getTemporaryDirectory();
      }

      final fileName = 'severnaya_korzina_${updateInfo.latestVersion}.apk';
      final filePath = '${dir.path}/$fileName';

      print('üì± Saving APK to: $filePath');

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      final file = File(filePath);
      if (await file.exists()) {
        await file.delete();
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º APK
      await dio.download(
        updateInfo.downloadUrl,
        filePath,
        onReceiveProgress: (received, total) {
          if (total != -1 && !downloadCancelled) {
            final progress = received / total;
            onDownloadProgress?.call(progress);
          }
        },
        cancelToken:
            _currentDownloadToken, // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º CancelToken
        options: Options(
          headers: {
            'Accept': '*/*',
            'Connection': 'keep-alive',
          },
          responseType: ResponseType.bytes,
          followRedirects: true,
        ),
      );

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏
      if (context.mounted) {
        Navigator.of(context).pop();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä
      if (!await file.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      }

      final fileSize = await file.length();
      print('üì± APK saved successfully. Size: $fileSize bytes');

      if (fileSize < 1000000) {
        // –ú–µ–Ω—å—à–µ 1MB - —è–≤–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
        throw Exception(
            '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      await _showInstallNotification(context, filePath, fileName);

      // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      await Future.delayed(Duration(seconds: 1));

      final result = await OpenFile.open(
        filePath,
        type: 'application/vnd.android.package-archive',
      );

      print('üì± OpenFile result: ${result.type} - ${result.message}');

      // –ï—Å–ª–∏ open_file –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      if (result.type != ResultType.done) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (context.mounted) {
          showDialog(
            context: context,
            builder: (context) => AlertDialog(
              title: Text('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('APK —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!'),
                  SizedBox(height: 12),
                  Text('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:'),
                  SizedBox(height: 8),
                  Text('1. –û—Ç–∫—Ä–æ–π—Ç–µ "–§–∞–π–ª—ã" –∏–ª–∏ "–ó–∞–≥—Ä—É–∑–∫–∏"'),
                  Text('2. –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª "$fileName"'),
                  Text('3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏'),
                  SizedBox(height: 12),
                  Text('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:',
                      style: TextStyle(fontSize: 12, color: Colors.grey)),
                  Text(filePath,
                      style: TextStyle(fontSize: 11, color: Colors.grey)),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫
                    _openDownloadsFolder();
                  },
                  child: Text('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É'),
                ),
                ElevatedButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: Text('OK'),
                ),
              ],
            ),
          );
        }
      }
    } on DioError catch (e) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—É –∑–∞–≥—Ä—É–∑–∫–∏
      if (e.type == DioErrorType.cancel) {
        print('üì± Download cancelled by user');
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        _currentDownloadToken = null;

        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞'),
              duration: Duration(seconds: 2),
            ),
          );
        }
      } else {
        print('‚ùå DioError downloading update: $e');
        _handleDownloadError(context, e.toString(), updateInfo);
      }
    } catch (e) {
      print('‚ùå Error downloading/installing update: $e');
      _handleDownloadError(context, e.toString(), updateInfo);
    } finally {
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      _currentDownloadToken = null;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
  void _handleDownloadError(
      BuildContext context, String error, UpdateInfo updateInfo) {
    if (context.mounted) {
      Navigator.of(context).pop(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $error'),
          duration: Duration(seconds: 5),
          action: SnackBarAction(
            label: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å',
            onPressed: () => _downloadAndInstallUpdate(context, updateInfo),
          ),
        ),
      );
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  Future<void> _showInstallNotification(
      BuildContext context, String filePath, String fileName) async {
    if (!context.mounted) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SnackBar —Å –∫–Ω–æ–ø–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.download_done, color: Colors.white),
            SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'),
                  Text(
                    fileName,
                    style: TextStyle(fontSize: 12, color: Colors.white70),
                  ),
                ],
              ),
            ),
          ],
        ),
        duration: Duration(seconds: 10),
        backgroundColor: Colors.green,
        action: SnackBarAction(
          label: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
          textColor: Colors.white,
          onPressed: () async {
            final result = await OpenFile.open(
              filePath,
              type: 'application/vnd.android.package-archive',
            );
            if (result.type != ResultType.done) {
              _openDownloadsFolder();
            }
          },
        ),
      ),
    );
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–æ–∫
  Future<void> _openDownloadsFolder() async {
    try {
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —á–µ—Ä–µ–∑ intent
      const platform = MethodChannel('app.channel.shared.data');
      await platform.invokeMethod('openDownloads');
    } catch (e) {
      print('Could not open downloads folder: $e');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  Future<bool> shouldShowUpdateDialog() async {
    if (_availableUpdate == null) return false;

    final prefs = await SharedPreferences.getInstance();

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if (_availableUpdate!.forceUpdate) return true;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ª–æ–∂–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    final skippedDateStr = prefs.getString('update_skipped_date');
    if (skippedDateStr != null) {
      final skippedDate = DateTime.parse(skippedDateStr);
      final daysSinceSkipped = DateTime.now().difference(skippedDate).inDays;
      final remindDays = _availableUpdate!.features['remind_later_days'] ?? 3;

      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
      if (daysSinceSkipped < remindDays) return false;
    }

    return true;
  }
}

// –ú–æ–¥–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
class UpdateInfo {
  final bool updateAvailable;
  final bool forceUpdate;
  final String latestVersion;
  final String minVersion;
  final String currentVersion;
  final String downloadUrl;
  final double sizeMb;
  final String releaseDate;
  final List<String> changelog;
  final Map<String, dynamic> features;
  final String message;
  final bool showChangelog;

  UpdateInfo({
    required this.updateAvailable,
    required this.forceUpdate,
    required this.latestVersion,
    required this.minVersion,
    required this.currentVersion,
    required this.downloadUrl,
    required this.sizeMb,
    required this.releaseDate,
    required this.changelog,
    required this.features,
    required this.message,
  }) : showChangelog = features['show_changelog'] ?? true;

  factory UpdateInfo.fromJson(Map<String, dynamic> json) {
    return UpdateInfo(
      updateAvailable: json['update_available'] ?? false,
      forceUpdate: json['force_update'] ?? false,
      latestVersion: json['latest_version'] ?? '',
      minVersion: json['min_version'] ?? '',
      currentVersion: json['current_version'] ?? '',
      downloadUrl: json['download_url'] ?? '',
      sizeMb: (json['size_mb'] ?? 0).toDouble(),
      releaseDate: json['release_date'] ?? '',
      changelog: List<String>.from(json['changelog'] ?? []),
      features: json['features'] ?? {},
      message: json['message'] ?? '',
    );
  }
}

// –í–∏–¥–∂–µ—Ç –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
class _DownloadProgressDialog extends StatefulWidget {
  final UpdateInfo updateInfo;
  final VoidCallback onCancel;

  const _DownloadProgressDialog({
    Key? key,
    required this.updateInfo,
    required this.onCancel,
  }) : super(key: key);

  @override
  _DownloadProgressDialogState createState() => _DownloadProgressDialogState();
}

class _DownloadProgressDialogState extends State<_DownloadProgressDialog> {
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    UpdateService().onDownloadProgress = (progress) {
      if (mounted) {
        setState(() {
          _progress = progress;
        });
      }
    };
  }

  @override
  void dispose() {
    UpdateService().onDownloadProgress = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final downloadedMb =
        (widget.updateInfo.sizeMb * _progress).toStringAsFixed(1);
    final totalMb = widget.updateInfo.sizeMb.toStringAsFixed(1);
    final percentage = (_progress * 100).toInt();

    return AlertDialog(
      title: Text('–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          LinearProgressIndicator(
            value: _progress,
            minHeight: 8,
          ),
          SizedBox(height: 16),
          Text(
            '$percentage%',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 8),
          Text(
            '$downloadedMb –ú–ë / $totalMb –ú–ë',
            style: TextStyle(color: Colors.grey[600]),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: widget.onCancel,
          child: Text('–û—Ç–º–µ–Ω–∞'),
        ),
      ],
    );
  }
}
