// lib/services/sms_service.dart
import 'dart:convert';
import 'dart:math';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';

class SMSService {
  // SMS AERO API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static const String _baseUrl = 'https://gate.smsaero.ru/v2';
  static const String _login = 'idob230491@gmail.com'; // Email –æ—Ç SMS Aero
  static const String _apiKey =
      'J1WD5J__f3ztsHpi5sBWrVef5jlVRo9J'; // API –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

  final Dio _dio = Dio(BaseOptions(
    connectTimeout: Duration(seconds: 30),
    receiveTimeout: Duration(seconds: 30),
    sendTimeout: Duration(seconds: 30),
  ));

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  final Map<String, String> _tempCodes = {};

  SMSService() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Basic Auth –¥–ª—è SMS Aero
    final credentials = base64Encode(utf8.encode('$_login:$_apiKey'));

    _dio.options.headers['Authorization'] = 'Basic $credentials';
    _dio.options.headers['Content-Type'] = 'application/json';
    _dio.options.headers['Accept'] = 'application/json';

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    _dio.interceptors.add(LogInterceptor(
      requestBody: true,
      responseBody: true,
      logPrint: (obj) => print('SMS AERO API: $obj'),
    ));
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ SMS Aero
  Future<bool> sendVerificationCode(String phone) async {
    try {
      final code = _generateCode();

      // print('=== SMS –û–¢–ü–†–ê–í–ö–ê (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú) ===');
      // print('–¢–µ–ª–µ—Ñ–æ–Ω: $phone');
      // print('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥: $code');
      // print('üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ 1234 –¥–ª—è –≤—Ö–æ–¥–∞');

      // // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º success
      // _tempCodes[phone] = code;

      // // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
      // await Future.delayed(Duration(seconds: 1));

      // print('‚úÖ SMS "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');
      // print('üí° –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥: 1234');

      // return true;

      // –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –û–¢–ü–†–ê–í–ö–ò SMS –ß–ï–†–ï–ó SMS AERO:

      // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
      final cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');
      print('–û—á–∏—â–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: $cleanPhone');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ SMS Aero API
      final response = await _dio.post(
        '$_baseUrl/sms/send',
        data: {
          'number': cleanPhone,
          'text': '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: $code',
          'sign': 'SMS Aero',
        },
      );

      print('HTTP Status: ${response.statusCode}');
      print('–û—Ç–≤–µ—Ç –æ—Ç SMS Aero: ${response.data}');

      if (response.statusCode == 200) {
        final data = response.data;

        if (data is Map && data['success'] == true) {
          // SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
          _tempCodes[phone] = code;
          final smsId = data['data']?['id'];
          print('‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMS Aero!');
          print('ID —Å–æ–æ–±—â–µ–Ω–∏—è: $smsId');
          print('–ö–æ–¥ $code —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ $phone');
          return true;
        } else {
          // –û—à–∏–±–∫–∞ –æ—Ç SMS Aero API
          final errorMessage = data['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          print('‚ùå –û—à–∏–±–∫–∞ SMS Aero: $errorMessage');

          // –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–ø–∏—Å—å—é, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ—ë
          if (errorMessage.toString().toLowerCase().contains('sign')) {
            return await _sendWithoutSign(cleanPhone, code);
          }

          return false;
        }
      }

      print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: ${response.statusCode}');
      return false;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: $e');

      return false;
    }
  }

  /// –ü—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  Future<bool> _sendWithoutSign(String cleanPhone, String code) async {
    try {
      print('üì± –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏...');

      final response = await _dio.post(
        '$_baseUrl/sms/send',
        data: {
          'number': cleanPhone,
          'text': '–ö–æ–¥: $code',
        },
      );

      print('–û—Ç–≤–µ—Ç –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏: ${response.data}');

      if (response.statusCode == 200 && response.data['success'] == true) {
        _tempCodes[cleanPhone] = code;
        print('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏!');
        return true;
      }

      return false;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
  bool verifyCode(String phone, String code) {
    print('=== –ü–†–û–í–ï–†–ö–ê SMS –ö–û–î–ê ===');
    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: $phone');
    print('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: $code');

    // // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    // if (code == '1234') {
    //   print('‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ 1234 - –≤—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω!');
    //   return true;
    // }

    print('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥—ã: $_tempCodes');

    final savedCode = _tempCodes[phone];
    if (savedCode != null && savedCode == code) {
      _tempCodes.remove(phone);
      print('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return true;
    }

    print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û–∂–∏–¥–∞–ª—Å—è: $savedCode, –ø–æ–ª—É—á–µ–Ω: $code');
    return false;
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
  String _generateCode() {
    final random = Random();
    return (1000 + random.nextInt(9000)).toString();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å SMS Aero
  Future<Map<String, dynamic>> checkBalance() async {
    try {
      print('–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å SMS Aero...');

      final response = await _dio.get('$_baseUrl/balance');

      if (response.statusCode == 200 && response.data['success'] == true) {
        final balance = response.data['data']['balance'];
        print('–ë–∞–ª–∞–Ω—Å SMS Aero: $balance —Ä—É–±');

        return {
          'success': true,
          'balance': balance,
          'currency': 'RUB',
        };
      }

      return {'success': false, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å'};
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SMS Aero: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  bool isValidPhoneNumber(String phone) {
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');
    return (cleanPhone.startsWith('7') || cleanPhone.startsWith('8')) &&
        cleanPhone.length == 11;
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥ +7XXXXXXXXXX
  String formatPhoneNumber(String phone) {
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');

    if (cleanPhone.startsWith('8') && cleanPhone.length == 11) {
      return '+7${cleanPhone.substring(1)}';
    }
    if (cleanPhone.startsWith('7') && cleanPhone.length == 11) {
      return '+$cleanPhone';
    }

    return phone;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  String? getLastCodeForPhone(String phone) {
    return _tempCodes[phone];
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–æ–¥—ã
  void clearAllCodes() {
    _tempCodes.clear();
  }
}
