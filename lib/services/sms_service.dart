// lib/services/sms_service.dart
import 'dart:convert';
import 'dart:math';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';

class SMSService {
  // SMS AERO API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static const String _baseUrl = 'https://gate.smsaero.ru/v2';
  static const String _login = 'idob230491@gmail.com'; // Email –æ—Ç SMS Aero
  static const String _apiKey =
      'J1WD5J__f3ztsHpi5sBWrVef5jlVRo9J'; // API –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

  final Dio _dio = Dio(BaseOptions(
    connectTimeout: Duration(seconds: 30),
    receiveTimeout: Duration(seconds: 30),
    sendTimeout: Duration(seconds: 30),
  ));

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  final Map<String, String> _tempCodes = {};

  SMSService() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Basic Auth –¥–ª—è SMS Aero
    final credentials = base64Encode(utf8.encode('$_login:$_apiKey'));

    _dio.options.headers['Authorization'] = 'Basic $credentials';
    _dio.options.headers['Content-Type'] = 'application/json';
    _dio.options.headers['Accept'] = 'application/json';

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    _dio.interceptors.add(LogInterceptor(
      requestBody: true,
      responseBody: true,
      logPrint: (obj) => print('SMS AERO API: $obj'),
    ));
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ SMS Aero
  Future<bool> sendVerificationCode(String phone) async {
    try {
      final code = _generateCode();

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è SMS Aero (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7)
      String cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');

      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 8 –∏–ª–∏ +7, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å 7
      if (cleanPhone.startsWith('8') && cleanPhone.length == 11) {
        cleanPhone = '7' + cleanPhone.substring(1);
      } else if (cleanPhone.startsWith('+7')) {
        cleanPhone = cleanPhone.substring(1);
      } else if (!cleanPhone.startsWith('7')) {
        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º
        cleanPhone = '7' + cleanPhone;
      }

      print('=== –û–¢–ü–†–ê–í–ö–ê SMS ===');
      print('üì± –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: $phone');
      print('üì± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: $cleanPhone');
      print('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥: $code');

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å
      final balanceCheck = await checkBalance();
      if (balanceCheck['success'] == true) {
        print('üí∞ –ë–∞–ª–∞–Ω—Å: ${balanceCheck['balance']} —Ä—É–±');
        if ((balanceCheck['balance'] as num) < 2) {
          print('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ SMS Aero');
          return false;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMS Aero - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      // –¢–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ú–¢–°
      final response = await _dio.post(
        '$_baseUrl/sms/send',
        data: {
          'number': cleanPhone,
          'text':
              '–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞: –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ $code –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          'sign': 'SMS Aero', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
          'channel': 'DIRECT' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∫–∞–Ω–∞–ª
        },
      );

      print('HTTP Status: ${response.statusCode}');
      print('–û—Ç–≤–µ—Ç –æ—Ç SMS Aero: ${response.data}');

      if (response.statusCode == 200) {
        final data = response.data;

        if (data is Map && data['success'] == true) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–¥–ª—è –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–∞)
          _tempCodes[phone] = code;
          _tempCodes[cleanPhone] = code;
          _tempCodes['+$cleanPhone'] = code;

          final smsId = data['data']?['id'];
          print('‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
          print('üì® ID —Å–æ–æ–±—â–µ–Ω–∏—è: $smsId');
          print('üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          Future.delayed(Duration(seconds: 2), () async {
            if (smsId != null) {
              await checkSmsStatus(smsId.toString());
            }
          });

          return true;
        } else {
          // –û—à–∏–±–∫–∞ –æ—Ç SMS Aero API
          final errorMessage = data['message'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          print('‚ùå –û—à–∏–±–∫–∞ SMS Aero: $errorMessage');

          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –Ω–æ–º–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          if (errorMessage.toString().toLowerCase().contains('number') ||
              errorMessage.toString().toLowerCase().contains('—Ñ–æ—Ä–º–∞—Ç')) {
            return await _sendWithAlternativeFormat(phone, code);
          }

          return false;
        }
      }

      print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å: ${response.statusCode}');
      return false;
    } catch (e) {
      print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: $e');

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
      if (e.toString().contains('SocketException') ||
          e.toString().contains('TimeoutException')) {
        print('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        return await _sendViaGet(phone);
      }

      return false;
    }
  }

  /// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å
  Future<bool> _sendViaGet(String phone) async {
    try {
      final code = _generateCode();
      String cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');

      if (cleanPhone.startsWith('8') && cleanPhone.length == 11) {
        cleanPhone = '7' + cleanPhone.substring(1);
      }

      print('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º GET –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS');

      final response = await _dio.get(
        '$_baseUrl/sms/send',
        queryParameters: {
          'number': cleanPhone,
          'text': '–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞: –∫–æ–¥ $code',
          'sign': 'SMS Aero', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
          'channel': 'DIRECT'
        },
      );

      if (response.statusCode == 200 && response.data['success'] == true) {
        _tempCodes[phone] = code;
        _tempCodes[cleanPhone] = code;
        print('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ GET –º–µ—Ç–æ–¥!');
        return true;
      }

      return false;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ GET –º–µ—Ç–æ–¥–∞: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –Ω–æ–º–µ—Ä–∞
  Future<bool> _sendWithAlternativeFormat(
      String originalPhone, String code) async {
    try {
      print('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞...');

      // –ü—Ä–æ–±—É–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º +7
      String altPhone = originalPhone.replaceAll(RegExp(r'[^\d]'), '');
      if (!altPhone.startsWith('7')) {
        altPhone = '7' + altPhone;
      }
      altPhone = '+' + altPhone;

      final response = await _dio.post(
        '$_baseUrl/sms/send',
        data: {
          'number': altPhone,
          'text': '–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞: –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ $code',
          'sign': 'SMS Aero', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
          'channel': 'INTERNATIONAL' // –ü—Ä–æ–±—É–µ–º –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
        },
      );

      if (response.statusCode == 200 && response.data['success'] == true) {
        _tempCodes[originalPhone] = code;
        _tempCodes[altPhone] = code;
        print('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º!');
        return true;
      }

      return false;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
  bool verifyCode(String phone, String code) {
    print('=== –ü–†–û–í–ï–†–ö–ê SMS –ö–û–î–ê ===');
    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: $phone');
    print('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: $code');

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–∞–∫ –∂–µ –∫–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    String cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');
    if (cleanPhone.startsWith('8') && cleanPhone.length == 11) {
      cleanPhone = '7' + cleanPhone.substring(1);
    }

    print('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤: $phone, $cleanPhone, +$cleanPhone');
    print('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥—ã: $_tempCodes');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–æ–º–µ—Ä–∞
    final savedCode = _tempCodes[phone] ??
        _tempCodes[cleanPhone] ??
        _tempCodes['+$cleanPhone'];

    if (savedCode != null && savedCode == code) {
      // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
      _tempCodes.remove(phone);
      _tempCodes.remove(cleanPhone);
      _tempCodes.remove('+$cleanPhone');
      print('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      return true;
    }

    print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û–∂–∏–¥–∞–ª—Å—è: $savedCode, –ø–æ–ª—É—á–µ–Ω: $code');
    return false;
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
  String _generateCode() {
    final random = Random();
    return (1000 + random.nextInt(9000)).toString();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å SMS Aero
  Future<Map<String, dynamic>> checkBalance() async {
    try {
      print('üí∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å SMS Aero...');

      final response = await _dio.get('$_baseUrl/balance');

      if (response.statusCode == 200 && response.data['success'] == true) {
        final balance = response.data['data']['balance'];
        print('üí∞ –ë–∞–ª–∞–Ω—Å SMS Aero: $balance —Ä—É–±');

        return {
          'success': true,
          'balance': balance,
          'currency': 'RUB',
        };
      }

      return {'success': false, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å'};
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ SMS
  Future<Map<String, dynamic>> checkSmsStatus(String smsId) async {
    try {
      print('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å SMS: $smsId');

      final response = await _dio
          .get('$_baseUrl/sms/status', queryParameters: {'id': smsId});

      if (response.statusCode == 200) {
        print('üìä –°—Ç–∞—Ç—É—Å SMS: ${response.data}');
        return response.data;
      }

      return {'success': false};
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
      return {'success': false, 'error': e.toString()};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
  bool isValidPhoneNumber(String phone) {
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');
    return (cleanPhone.startsWith('7') || cleanPhone.startsWith('8')) &&
        cleanPhone.length == 11;
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥ +7XXXXXXXXXX
  String formatPhoneNumber(String phone) {
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');

    if (cleanPhone.startsWith('8') && cleanPhone.length == 11) {
      return '+7${cleanPhone.substring(1)}';
    }
    if (cleanPhone.startsWith('7') && cleanPhone.length == 11) {
      return '+$cleanPhone';
    }

    return phone;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  String? getLastCodeForPhone(String phone) {
    return _tempCodes[phone];
  }

  /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–æ–¥—ã
  void clearAllCodes() {
    _tempCodes.clear();
  }
}
