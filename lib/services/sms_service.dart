// lib/services/sms_service.dart - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –†–ê–ë–û–¢–´ –ß–ï–†–ï–ó BACKEND
import 'dart:convert';
import 'dart:math';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';

class SMSService {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à backend –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è SMS
  static const String _baseUrl = 'http://84.201.149.245:3000/api';

  final Dio _dio = Dio(BaseOptions(
    connectTimeout: Duration(seconds: 30),
    receiveTimeout: Duration(seconds: 30),
    sendTimeout: Duration(seconds: 30),
  ));

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–æ–µ, –¥–ª—è fallback)
  final Map<String, String> _tempCodes = {};

  SMSService() {
    _dio.options.headers['Content-Type'] = 'application/json';
    _dio.options.headers['Accept'] = 'application/json';

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    _dio.interceptors.add(LogInterceptor(
      requestBody: true,
      responseBody: true,
      logPrint: (obj) => print('SMS API: $obj'),
    ));
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —á–µ—Ä–µ–∑ –Ω–∞—à backend (–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SMS Aero)
  Future<bool> sendVerificationCode(String phone) async {
    try {
      String cleanPhone = _formatPhoneNumber(phone);

      print('=== –û–¢–ü–†–ê–í–ö–ê SMS ===');
      print('üì± –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: $phone');
      print('üì± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: $cleanPhone');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ –Ω–∞—à backend
      print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ backend...');

      final response = await _dio.post(
        '$_baseUrl/sms/send',
        data: {
          'phone': cleanPhone,
        },
      );

      print('üì• –û—Ç–≤–µ—Ç backend: ${response.statusCode} ${response.data}');

      if (response.statusCode == 200 && response.data['success'] == true) {
        print('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ backend!');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        final now = DateTime.now();
        _tempCodes['${cleanPhone}_sent'] = now.toIso8601String();

        return true;
      } else {
        print('‚ùå Backend –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${response.data}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —á–µ—Ä–µ–∑ backend: $e');

      // –ï—Å–ª–∏ backend –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º fallback —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
      if (!kIsWeb) {
        return await _sendViaDirect(phone);
      }

      return false;
    }
  }

  /// Fallback –º–µ—Ç–æ–¥ - –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
  Future<bool> _sendViaDirect(String phone) async {
    try {
      print('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

      // –í–µ–±-–≤–µ—Ä—Å–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑-–∑–∞ CORS
      if (kIsWeb) {
        print('‚ùå –í–µ–±-–≤–µ—Ä—Å–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑-–∑–∞ CORS');
        return false;
      }

      final code = _generateCode();
      String cleanPhone = _formatPhoneNumber(phone);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è fallback
      _tempCodes[phone] = code;
      _tempCodes[cleanPhone] = code;

      print('üîë Fallback –∫–æ–¥: $code');

      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
      final credentials = base64Encode(
          utf8.encode('idob230491@gmail.com:J1WD5J__f3ztsHpi5sBWrVef5jlVRo9J'));

      final response = await Dio().post(
        'https://gate.smsaero.ru/v2/sms/send',
        data: {
          'number': cleanPhone,
          'text': '–°–µ–≤–µ—Ä–Ω–∞—è –ö–æ—Ä–∑–∏–Ω–∞: –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ $code',
          'sign': 'SMS Aero',
          'channel': 'DIRECT'
        },
        options: Options(
          headers: {
            'Authorization': 'Basic $credentials',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
        ),
      );

      if (response.statusCode == 200 && response.data['success'] == true) {
        print('‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ fallback –º–µ—Ç–æ–¥!');
        return true;
      }

      return false;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ fallback –º–µ—Ç–æ–¥–∞: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ backend
  Future<bool> verifyCodeViaBackend(String phone, String code) async {
    try {
      print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ backend...');

      final response = await _dio.post(
        '$_baseUrl/sms/verify',
        data: {
          'phone': phone,
          'code': code,
        },
      );

      if (response.statusCode == 200 && response.data['success'] == true) {
        print('‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —á–µ—Ä–µ–∑ backend!');
        return true;
      } else {
        print('‚ùå Backend –æ—Ç–∫–ª–æ–Ω–∏–ª –∫–æ–¥: ${response.data}');
        return false;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ backend: $e');
      return false;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  bool verifyCode(String phone, String code) {
    print('=== –ü–†–û–í–ï–†–ö–ê SMS –ö–û–î–ê ===');
    print('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: $phone');
    print('–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥: $code');

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–∞–∫ –∂–µ –∫–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    String cleanPhone = _formatPhoneNumber(phone);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥—ã (–¥–ª—è fallback)
    final savedCode = _tempCodes[phone] ?? _tempCodes[cleanPhone];

    if (savedCode != null && savedCode == code) {
      print('‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π (–ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)');

      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      _tempCodes.remove(phone);
      _tempCodes.remove(cleanPhone);

      return true;
    }

    print('‚ÑπÔ∏è –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ backend');
    return false;
  }

  /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI)
  Future<bool> verifyCodeAsync(String phone, String code) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (–¥–ª—è fallback —Å–ª—É—á–∞–µ–≤)
    if (verifyCode(phone, code)) {
      return true;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ backend
    return await verifyCodeViaBackend(phone, code);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å SMS —Å–µ—Ä–≤–∏—Å–∞
  Future<Map<String, dynamic>> checkServiceStatus() async {
    try {
      final response = await _dio.get('$_baseUrl/sms/status');

      if (response.statusCode == 200) {
        return {'success': true, 'data': response.data};
      }

      return {
        'success': false,
        'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: ${response.statusCode}'
      };
    } catch (e) {
      return {'success': false, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e'};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å SMS —Å–µ—Ä–≤–∏—Å–∞
  Future<Map<String, dynamic>> checkBalance() async {
    try {
      final response = await _dio.get('$_baseUrl/sms/status');

      if (response.statusCode == 200 && response.data['success'] == true) {
        return {
          'success': true,
          'balance': response.data['balance'],
          'service': response.data['service']
        };
      }

      return {'success': false, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å'};
    } catch (e) {
      return {'success': false, 'error': '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: $e'};
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
  String _formatPhoneNumber(String phone) {
    String cleanPhone = phone.replaceAll(RegExp(r'[^\d]'), '');

    if (cleanPhone.startsWith('8') && cleanPhone.length == 11) {
      cleanPhone = '7' + cleanPhone.substring(1);
    } else if (!cleanPhone.startsWith('7')) {
      cleanPhone = '7' + cleanPhone;
    }

    return cleanPhone;
  }

  /// –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
  String formatPhoneNumber(String phone) {
    return _formatPhoneNumber(phone);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  bool isValidPhoneNumber(String phone) {
    final cleanPhone = _formatPhoneNumber(phone);

    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 7
    return cleanPhone.length == 11 && cleanPhone.startsWith('7');
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
  String _generateCode() {
    final random = Random();
    return (1000 + random.nextInt(9000)).toString();
  }

  /// –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–¥—ã
  void clearCodes() {
    _tempCodes.clear();
    print('üßπ –ö–æ–¥—ã –æ—á–∏—â–µ–Ω—ã');
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–¥–∞—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Map<String, String> getStoredCodes() {
    return Map.from(_tempCodes);
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  String? getLastCodeForPhone(String phone) {
    final cleanPhone = _formatPhoneNumber(phone);
    return _tempCodes[phone] ?? _tempCodes[cleanPhone];
  }
}
