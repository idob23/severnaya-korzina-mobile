// ========================================
// 1. lib/providers/auth_provider.dart
// ========================================

import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';
import '../models/user.dart';
import '../services/sms_service.dart';
import '../services/api_service.dart';

class AuthProvider with ChangeNotifier {
  User? _currentUser;
  bool _isAuthenticated = false;
  bool _isLoading = false;
  String? _lastError;

  final SMSService _smsService = SMSService();
  final ApiService _apiService = ApiService();

  User? get currentUser => _currentUser;
  bool get isAuthenticated => _isAuthenticated;
  bool get isLoading => _isLoading;
  String? get lastError => _lastError;

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _authTokenKey = 'auth_token';
  static const String _userDataKey = 'user_data';
  static const String _autoLoginPhoneKey = 'auto_login_phone';

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> init() async {
    await checkAuthStatus();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  Future<void> checkAuthStatus() async {
    _isLoading = true;
    _lastError = null;
    notifyListeners();

    try {
      final prefs = await SharedPreferences.getInstance();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final userJson = prefs.getString(_userDataKey);
      final token = prefs.getString(_authTokenKey);

      if (userJson != null && token != null) {
        try {
          final userData = jsonDecode(userJson);
          _currentUser = User.fromJson(userData);
          _isAuthenticated = true;

          // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ ApiService —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
          _apiService.setAuthToken(token);

          if (kDebugMode) {
            print(
                '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${_currentUser?.fullName}');
            print(
                '‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ApiService: ${token.substring(0, 10)}...');
          }
        } catch (e) {
          if (kDebugMode) {
            print('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
          }
          // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          await prefs.remove(_userDataKey);
          await prefs.remove(_authTokenKey);
          _apiService.clearAuthToken();
        }
      } else {
        if (kDebugMode) {
          print('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
        }
      }
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e';
      if (kDebugMode) {
        print('‚ùå Auth check error: $e');
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  Future<bool> sendSMSCode(String phone) async {
    _isLoading = true;
    _lastError = null;
    notifyListeners();

    try {
      final formattedPhone = _smsService.formatPhoneNumber(phone);

      if (!_smsService.isValidPhoneNumber(formattedPhone)) {
        _lastError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        return false;
      }

      if (kDebugMode) {
        print('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS –∫–æ–¥ –Ω–∞: $formattedPhone');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
      final healthResult = await _apiService.healthCheck();
      final isConnected = healthResult['success'] == true;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
      final success = await _smsService.sendVerificationCode(formattedPhone);

      if (!success) {
        _lastError = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
      }

      return success;
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: $e';
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: $e');
      }
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç SMS –∫–æ–¥ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
  Future<bool> verifySMSAndLogin(String phone, String code,
      {bool rememberMe = false}) async {
    _isLoading = true;
    _lastError = null;
    notifyListeners();

    try {
      final formattedPhone = _smsService.formatPhoneNumber(phone);

      if (kDebugMode) {
        print('üîê –ù–∞—á–∏–Ω–∞–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è: $formattedPhone');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ª–æ–∫–∞–ª—å–Ω–æ
      final isCodeValid = _smsService.verifyCode(formattedPhone, code);

      if (!isCodeValid) {
        _lastError = '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
        return false;
      }

      if (kDebugMode) {
        print('‚úÖ SMS –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      }

      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è —á–µ—Ä–µ–∑ API
      final loginResult = await _apiService.login(
        phone: formattedPhone,
        smsCode: code,
      );

      if (kDebugMode) {
        print('üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${loginResult['success']}');
      }

      if (loginResult['success'] == true) {
        final userData = loginResult['user'];
        final token = loginResult['token'];

        if (userData != null) {
          try {
            if (kDebugMode) {
              print('üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞...');
            }

            _currentUser = User.fromJson(userData);
            _isAuthenticated = true;

            if (kDebugMode) {
              print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${_currentUser?.fullName}');
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            if (token != null) {
              final prefs = await SharedPreferences.getInstance();
              await prefs.setString(_authTokenKey, token);
              _apiService.setAuthToken(token);

              if (kDebugMode) {
                print('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
              }
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
            await _saveUserToPrefs(_currentUser!);

            // –ê–≤—Ç–æ–ª–æ–≥–∏–Ω
            if (rememberMe) {
              final prefs = await SharedPreferences.getInstance();
              await prefs.setString(_autoLoginPhoneKey, formattedPhone);

              if (kDebugMode) {
                print('‚úÖ –ê–≤—Ç–æ–ª–æ–≥–∏–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
              }
            }

            if (kDebugMode) {
              print(
                  'üéâ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${_currentUser?.fullName}');
            }

            return true;
          } catch (e) {
            if (kDebugMode) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
              print('üìä UserData: $userData');
            }
            _lastError = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e';
            return false;
          }
        } else {
          _lastError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
          return false;
        }
      } else {
        _lastError = loginResult['error'] ?? '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        return false;
      }
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: $e';
      if (kDebugMode) {
        print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ verifySMSAndLogin: $e');
      }
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
  Future<bool> register(String phone, String firstName, String password,
      {String? lastName}) async {
    _isLoading = true;
    _lastError = null;
    notifyListeners();

    try {
      final formattedPhone = _smsService.formatPhoneNumber(phone);

      if (!_smsService.isValidPhoneNumber(formattedPhone)) {
        _lastError = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        return false;
      }

      if (kDebugMode) {
        print('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $formattedPhone');
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è —á–µ—Ä–µ–∑ API
      final registerResult = await _apiService.register(
        phone: formattedPhone,
        firstName: firstName.trim(),
        lastName: lastName?.trim(),
      );

      if (kDebugMode) {
        print('üì° –û—Ç–≤–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${registerResult['success']}');
      }

      if (registerResult['success'] == true) {
        final userData = registerResult['user'];
        final token = registerResult['token'];

        if (userData != null) {
          try {
            _currentUser = User.fromJson(userData);
            _isAuthenticated = true;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            if (token != null) {
              final prefs = await SharedPreferences.getInstance();
              await prefs.setString(_authTokenKey, token);
              _apiService.setAuthToken(token);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–∫–∞–ª—å–Ω–æ
            await _saveUserToPrefs(_currentUser!);

            if (kDebugMode) {
              print(
                  '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${_currentUser?.fullName}');
            }

            return true;
          } catch (e) {
            if (kDebugMode) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e');
            }
            _lastError = '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            return false;
          }
        } else {
          _lastError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
          return false;
        }
      } else {
        _lastError = registerResult['error'] ?? '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
        return false;
      }
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e';
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ register: $e');
      }
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SharedPreferences
  Future<void> _saveUserToPrefs(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userJson = jsonEncode(user.toJson());
      await prefs.setString(_userDataKey, userJson);

      if (kDebugMode) {
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
      }
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }
  }

  /// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> logout() async {
    _isLoading = true;
    notifyListeners();

    try {
      final prefs = await SharedPreferences.getInstance();

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      await prefs.remove(_authTokenKey);
      await prefs.remove(_userDataKey);
      await prefs.remove(_autoLoginPhoneKey);

      _apiService.clearAuthToken();

      _currentUser = null;
      _isAuthenticated = false;
      _lastError = null;

      if (kDebugMode) {
        print('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
      }
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<bool> updateUserProfile({
    String? firstName,
    String? lastName,
    String? email,
  }) async {
    if (_currentUser == null) return false;

    _isLoading = true;
    notifyListeners();

    try {
      final updatedUser = _currentUser!.copyWith(
        name: firstName ?? _currentUser!.name,
        lastName: lastName ?? _currentUser!.lastName,
        email: email ?? _currentUser!.email,
        updatedAt: DateTime.now(),
      );

      await _saveUserToPrefs(updatedUser);
      _currentUser = updatedUser;

      if (kDebugMode) {
        print('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${_currentUser?.fullName}');
      }

      return true;
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: $e';
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ updateUserProfile: $e');
      }
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É
  void clearError() {
    _lastError = null;
    notifyListeners();
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–ª–æ–≥–∏–Ω
  Future<bool> canAutoLogin(String phone) async {
    try {
      final formattedPhone = _smsService.formatPhoneNumber(phone);
      final prefs = await SharedPreferences.getInstance();
      final autoLoginPhone = prefs.getString(_autoLoginPhoneKey);
      return autoLoginPhone == formattedPhone;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞: $e');
      }
      return false;
    }
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
  void forceUpdate() {
    notifyListeners();
  }
}
