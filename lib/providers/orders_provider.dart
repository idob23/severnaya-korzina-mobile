// lib/providers/orders_provider.dart - –ß–ò–°–¢–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../services/api_service.dart';
import '../models/order.dart';
import '../services/notification_service.dart';

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
class OrdersProvider with ChangeNotifier {
  List<Order> _orders = [];
  bool _isLoading = false;
  String? _error;
  String _selectedStatus = 'all';

  final ApiService _apiService = ApiService();

  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<Order> get orders => _orders;
  bool get isLoading => _isLoading;
  String? get error => _error;
  String get selectedStatus => _selectedStatus;

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get filteredOrders {
    if (_selectedStatus == 'all') {
      return _orders;
    }
    return _orders.where((order) => order.status == _selectedStatus).toList();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> init() async {
    if (kDebugMode) {
      print('üîÑ OrdersProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    }

    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω!
    await _initializeApiToken();

    // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    await loadOrders();
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ ApiService
  Future<void> _initializeApiToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('auth_token');

      if (token != null) {
        _apiService.setAuthToken(token);
        if (kDebugMode) {
          print('‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ApiService –¥–ª—è OrdersProvider');
        }
      } else {
        if (kDebugMode) {
          print('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SharedPreferences –¥–ª—è OrdersProvider');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ OrdersProvider: $e');
      }
    }
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> loadOrders({
    String? status,
    int page = 1,
    int limit = 20,
    bool silent = false,
  }) async {
    print('–¢–ï–°–¢: –°–æ–∑–¥–∞–µ–º NotificationService');
    final testService = NotificationService();
    testService.showLocalNotification(
      title: '–¢–ï–°–¢ loadOrders',
      body: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
    );

    print(
        'üîî TEST: loadOrders –≤—ã–∑–≤–∞–Ω, silent=$silent, —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤=${_orders.length}');

    if (!silent) {
      _isLoading = true;
      _error = null;
      notifyListeners();
    }

    try {
      if (kDebugMode) {
        print('üîÑ OrdersProvider: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...');
      }

      final result = await _apiService.getOrders(
        status: status,
        page: page,
        limit: limit,
      );

      if (kDebugMode) {
        print('üì° OrdersProvider: –û—Ç–≤–µ—Ç –æ—Ç API: ${result['success']}');
        if (result['error'] != null) {
          print('‚ùå OrdersProvider: –û—à–∏–±–∫–∞ API: ${result['error']}');
        }
      }

      if (result['success'] == true) {
        final ordersList = result['orders'] as List? ?? [];
        final newOrders =
            ordersList.map((json) => Order.fromJson(json)).toList();
        print(
            'üîî TEST: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è - —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${_orders.length}, –Ω–æ–≤—ã—Ö: ${newOrders.length}');

        if (!silent && _orders.isNotEmpty) {
          print('üîî TEST: –í—ã–∑—ã–≤–∞–µ–º _checkForStatusChanges');
          _checkForStatusChanges(newOrders);
        } else {
          print(
              'üîî TEST: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º _checkForStatusChanges - silent=$silent, orders.isEmpty=${_orders.isEmpty}');
        }

        _orders = newOrders;

        if (kDebugMode) {
          print('‚úÖ OrdersProvider: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_orders.length} –∑–∞–∫–∞–∑–æ–≤');
        }
      } else {
        _error = result['error'] ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤';
        if (kDebugMode) {
          print('‚ùå OrdersProvider: –û—à–∏–±–∫–∞ - $_error');
        }
      }
    } catch (e) {
      _error = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
      if (kDebugMode) {
        print('‚ùå OrdersProvider: Exception - $e');
      }
    } finally {
      if (!silent) {
        _isLoading = false;
        notifyListeners();
      }
    }
  }

  void _checkForStatusChanges(List<Order> newOrders) {
    print(
        'üîî TEST: _checkForStatusChanges –≤—ã–∑–≤–∞–Ω, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º ${newOrders.length} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å ${_orders.length} —Å—Ç–∞—Ä—ã–º–∏');

    final notificationService = NotificationService();

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ —Å—Ç–∞—Ä—ã–º —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    for (final newOrder in newOrders) {
      final oldOrder = _orders.where((o) => o.id == newOrder.id).firstOrNull;

      print(
          'üîî TEST: –ó–∞–∫–∞–∑ #${newOrder.id} - oldOrder: ${oldOrder != null ? "–Ω–∞–π–¥–µ–Ω" : "–ù–ï –Ω–∞–π–¥–µ–Ω"}, —Å—Ç–∞—Ç—É—Å: ${newOrder.status}');

      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–æ–≤—ã–π –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (oldOrder == null) {
        print('üîî TEST: –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${newOrder.id}!');
        // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notificationService.showLocalNotification(
          title: 'üéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${newOrder.id}',
          body: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É ${newOrder.formattedAmount}',
        );
      } else if (oldOrder.status != newOrder.status) {
        print(
            'üîî TEST: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${newOrder.id} –∏–∑–º–µ–Ω–∏–ª—Å—è: ${oldOrder.status} ‚Üí ${newOrder.status}');
        // –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notificationService.showOrderStatusNotification(
          orderId: newOrder.id,
          oldStatus: oldOrder.status,
          newStatus: newOrder.status,
        );
      } else {
        print('üîî TEST: –ó–∞–∫–∞–∑ #${newOrder.id} –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      }
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  Future<bool> createOrder({
    required int addressId,
    int? batchId,
    required List<Map<String, dynamic>> items,
    String? notes,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      final result = await _apiService.createOrder(
        addressId: addressId,
        batchId: batchId,
        items: items,
        notes: notes,
      );

      if (result['success']) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫
        final newOrder = Order.fromJson(result['order']);

        // –ü–†–û–°–¢–ï–ô–®–ò–ô –¢–ï–°–¢
        print(
            'üîî –¢–ï–°–¢: –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${newOrder.id}');
        final notificationService = NotificationService();
        print('üîî –¢–ï–°–¢: NotificationService —Å–æ–∑–¥–∞–Ω');

        notificationService.showLocalNotification(
          title: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${newOrder.id}',
          body: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É ${newOrder.formattedAmount}',
        );

        print('üîî –¢–ï–°–¢: showLocalNotification –≤—ã–∑–≤–∞–Ω');
        // // –¢–ï–°–¢: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        // final notificationService = NotificationService();
        // notificationService.showLocalNotification(
        //   title: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${newOrder.id}',
        //   body: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É ${newOrder.formattedAmount}',
        // );

        _orders.insert(0, newOrder);

        if (kDebugMode) {
          print('OrdersProvider: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω - ${newOrder.id}');
        }

        notifyListeners();
        return true;
      } else {
        _error = result['error'] ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞';
        return false;
      }
    } catch (e) {
      _error = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
      if (kDebugMode) {
        print('OrdersProvider: Exception –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ - $e');
      }
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID
  Future<Order?> getOrder(int orderId) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
      final existingOrders = _orders.where((o) => o.id == orderId);
      if (existingOrders.isNotEmpty) {
        return existingOrders.first;
      }
      return null;
    } catch (e) {
      _error = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞';
      notifyListeners();
      return null;
    }
  }

  /// –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
  void filterByStatus(String status) {
    _selectedStatus = status;
    notifyListeners();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
  List<Order> getOrdersByStatus(String status) {
    return _orders.where((order) => order.status == status).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get activeOrders {
    return _orders
        .where((order) =>
            ['pending', 'confirmed', 'paid', 'shipped'].contains(order.status))
        .toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get completedOrders {
    return _orders.where((order) => order.status == 'delivered').toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get cancelledOrders {
    return _orders.where((order) => order.status == 'cancelled').toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  Map<String, dynamic> getOrdersStats() {
    final total = _orders.length;
    final pending = _orders.where((o) => o.status == 'pending').length;
    final confirmed = _orders.where((o) => o.status == 'confirmed').length;
    final delivered = _orders.where((o) => o.status == 'delivered').length;
    final cancelled = _orders.where((o) => o.status == 'cancelled').length;

    final totalRevenue = _orders
        .where((o) => ['delivered', 'paid'].contains(o.status))
        .fold(0.0, (sum, order) => sum + order.totalAmount);

    final today = DateTime.now();
    final todayOrders = _orders
        .where((order) =>
            order.createdAt.day == today.day &&
            order.createdAt.month == today.month &&
            order.createdAt.year == today.year)
        .length;

    return {
      'total': total,
      'pending': pending,
      'confirmed': confirmed,
      'delivered': delivered,
      'cancelled': cancelled,
      'total_revenue': totalRevenue,
      'today': todayOrders,
    };
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
  Future<void> refresh() async {
    await loadOrders(status: _selectedStatus == 'all' ? null : _selectedStatus);
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã
  bool get hasOrders => _orders.isNotEmpty;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  bool get hasFilteredOrders => filteredOrders.isNotEmpty;

  /// –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫–∏
  void clearError() {
    _error = null;
    notifyListeners();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  void forceUpdate() {
    notifyListeners();
  }
}
