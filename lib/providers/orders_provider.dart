// lib/providers/orders_provider.dart - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import 'package:flutter/foundation.dart';
import '../services/api_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// –ú–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–∞
class Order {
  final int id;
  final int userId;
  final int addressId;
  final int? batchId;
  final String status;
  final double totalAmount;
  final String? notes;
  final DateTime createdAt;
  final DateTime? updatedAt;

  // –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  final Map<String, dynamic>? user;
  final Map<String, dynamic>? address;
  final Map<String, dynamic>? batch;
  final List<OrderItem>? orderItems;

  Order({
    required this.id,
    required this.userId,
    required this.addressId,
    this.batchId,
    required this.status,
    required this.totalAmount,
    this.notes,
    required this.createdAt,
    this.updatedAt,
    this.user,
    this.address,
    this.batch,
    this.orderItems,
  });

  factory Order.fromJson(Map<String, dynamic> json) {
    return Order(
      id: json['id'] ?? 0,
      userId: json['userId'] ?? 0,
      addressId: json['addressId'] ?? 0,
      batchId: json['batchId'],
      status: json['status'] ?? 'pending',
      totalAmount: (json['totalAmount'] ?? 0).toDouble(),
      notes: json['notes'],
      createdAt: json['createdAt'] != null
          ? DateTime.parse(json['createdAt'])
          : DateTime.now(),
      updatedAt:
          json['updatedAt'] != null ? DateTime.parse(json['updatedAt']) : null,
      user: json['user'],
      address: json['address'],
      batch: json['batch'],
      orderItems: json['orderItems'] != null
          ? (json['orderItems'] as List)
              .map((item) => OrderItem.fromJson(item))
              .toList()
          : null,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'userId': userId,
      'addressId': addressId,
      'batchId': batchId,
      'status': status,
      'totalAmount': totalAmount,
      'notes': notes,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt?.toIso8601String(),
    };
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
  String get formattedAmount {
    return '${totalAmount.toStringAsFixed(0)} ‚ÇΩ';
  }

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
  int get itemsCount {
    return orderItems?.length ?? 0;
  }

  /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞
  int get totalItems {
    if (orderItems == null) return 0;
    return orderItems!.fold(0, (sum, item) => sum + item.quantity);
  }

  /// –°—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  String get statusText {
    switch (status) {
      case 'pending':
        return '–û–∂–∏–¥–∞–µ—Ç';
      case 'confirmed':
        return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'paid':
        return '–û–ø–ª–∞—á–µ–Ω';
      case 'shipped':
        return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'delivered':
        return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
      case 'cancelled':
        return '–û—Ç–º–µ–Ω–µ–Ω';
      default:
        return status;
    }
  }

  /// –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
  String get statusColor {
    switch (status) {
      case 'pending':
        return 'orange';
      case 'confirmed':
        return 'blue';
      case 'paid':
        return 'green';
      case 'shipped':
        return 'purple';
      case 'delivered':
        return 'green';
      case 'cancelled':
        return 'red';
      default:
        return 'grey';
    }
  }

  @override
  String toString() {
    return 'Order(id: $id, status: $status, amount: $formattedAmount)';
  }
}

/// –ú–æ–¥–µ–ª—å –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
class OrderItem {
  final int id;
  final int orderId;
  final int productId;
  final int quantity;
  final double price;
  final Map<String, dynamic>? product;

  OrderItem({
    required this.id,
    required this.orderId,
    required this.productId,
    required this.quantity,
    required this.price,
    this.product,
  });

  factory OrderItem.fromJson(Map<String, dynamic> json) {
    return OrderItem(
      id: json['id'] ?? 0,
      orderId: json['orderId'] ?? 0,
      productId: json['productId'] ?? 0,
      quantity: json['quantity'] ?? 0,
      price: (json['price'] ?? 0).toDouble(),
      product: json['product'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'orderId': orderId,
      'productId': productId,
      'quantity': quantity,
      'price': price,
    };
  }

  /// –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
  double get totalPrice {
    return price * quantity;
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  String get formattedTotalPrice {
    return '${totalPrice.toStringAsFixed(0)} ‚ÇΩ';
  }

  /// –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  String get productName {
    return product?['name'] ?? '–¢–æ–≤–∞—Ä #$productId';
  }

  /// –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
  String get unit {
    return product?['unit'] ?? '—à—Ç';
  }
}

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
class OrdersProvider with ChangeNotifier {
  List<Order> _orders = [];
  bool _isLoading = false;
  String? _error;
  String _selectedStatus = 'all';

  final ApiService _apiService = ApiService();

  // –ì–µ—Ç—Ç–µ—Ä—ã
  List<Order> get orders => _orders;
  bool get isLoading => _isLoading;
  String? get error => _error;
  String get selectedStatus => _selectedStatus;

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get filteredOrders {
    if (_selectedStatus == 'all') {
      return _orders;
    }
    return _orders.where((order) => order.status == _selectedStatus).toList();
  }

  // –ò –£–õ–£–ß–®–ò–¢–¨ –ú–ï–¢–û–î loadOrders() –î–õ–Ø –õ–£–ß–®–ï–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
  Future<void> loadOrders({
    String? status,
    int page = 1,
    int limit = 20,
    bool silent = false,
  }) async {
    if (!silent) {
      _isLoading = true;
      _error = null;
      notifyListeners();
    }

    try {
      if (kDebugMode) {
        print('üîÑ OrdersProvider: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...');
      }

      final result = await _apiService.getOrders(
        status: status,
        page: page,
        limit: limit,
      );

      if (kDebugMode) {
        print('üì° OrdersProvider: –û—Ç–≤–µ—Ç –æ—Ç API: ${result['success']}');
        if (result['error'] != null) {
          print('‚ùå OrdersProvider: –û—à–∏–±–∫–∞ API: ${result['error']}');
        }
      }

      if (result['success'] == true) {
        final ordersList = result['orders'] as List? ?? [];
        _orders = ordersList.map((json) => Order.fromJson(json)).toList();

        if (kDebugMode) {
          print('‚úÖ OrdersProvider: –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${_orders.length} –∑–∞–∫–∞–∑–æ–≤');
        }
      } else {
        _error = result['error'] ?? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤';
        if (kDebugMode) {
          print('‚ùå OrdersProvider: –û—à–∏–±–∫–∞ - $_error');
        }
      }
    } catch (e) {
      _error = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
      if (kDebugMode) {
        print('‚ùå OrdersProvider: Exception - $e');
      }
    } finally {
      if (!silent) {
        _isLoading = false;
        notifyListeners();
      }
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
  Future<bool> createOrder({
    required int addressId,
    int? batchId,
    required List<Map<String, dynamic>> items,
    String? notes,
  }) async {
    _isLoading = true;
    _error = null;
    notifyListeners();

    try {
      final result = await _apiService.createOrder(
        addressId: addressId,
        batchId: batchId,
        items: items,
        notes: notes,
      );

      if (result['success']) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–æ–∫
        final newOrder = Order.fromJson(result['order']);
        _orders.insert(0, newOrder);

        if (kDebugMode) {
          print('OrdersProvider: –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω - ${newOrder.id}');
        }

        notifyListeners();
        return true;
      } else {
        _error = result['error'] ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞';
        return false;
      }
    } catch (e) {
      _error = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
      if (kDebugMode) {
        print('OrdersProvider: Exception –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ - $e');
      }
      return false;
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID
  Future<Order?> getOrder(int orderId) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
      final existingOrders = _orders.where((o) => o.id == orderId);
      if (existingOrders.isNotEmpty) {
        return existingOrders.first;
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∫–æ–≥–¥–∞ API –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å)
      // final result = await _apiService.getOrder(orderId);
      // ...

      return null;
    } catch (e) {
      _error = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞';
      notifyListeners();
      return null;
    }
  }

  /// –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
  void filterByStatus(String status) {
    _selectedStatus = status;
    notifyListeners();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
  List<Order> getOrdersByStatus(String status) {
    return _orders.where((order) => order.status == status).toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get activeOrders {
    return _orders
        .where((order) =>
            ['pending', 'confirmed', 'paid', 'shipped'].contains(order.status))
        .toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get completedOrders {
    return _orders.where((order) => order.status == 'delivered').toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  List<Order> get cancelledOrders {
    return _orders.where((order) => order.status == 'cancelled').toList();
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
  Map<String, dynamic> getOrdersStats() {
    final total = _orders.length;
    final pending = _orders.where((o) => o.status == 'pending').length;
    final confirmed = _orders.where((o) => o.status == 'confirmed').length;
    final delivered = _orders.where((o) => o.status == 'delivered').length;
    final cancelled = _orders.where((o) => o.status == 'cancelled').length;

    final totalRevenue = _orders
        .where((o) => ['delivered', 'paid'].contains(o.status))
        .fold(0.0, (sum, order) => sum + order.totalAmount);

    final today = DateTime.now();
    final todayOrders = _orders
        .where((order) =>
            order.createdAt.day == today.day &&
            order.createdAt.month == today.month &&
            order.createdAt.year == today.year)
        .length;

    return {
      'total': total,
      'pending': pending,
      'confirmed': confirmed,
      'delivered': delivered,
      'cancelled': cancelled,
      'total_revenue': totalRevenue,
      'today': todayOrders,
    };
  }

  /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
  Future<void> refresh() async {
    await loadOrders(status: _selectedStatus == 'all' ? null : _selectedStatus);
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  Future<void> init() async {
    if (kDebugMode) {
      print('üîÑ OrdersProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    }
    await loadOrders();
  }

  // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ù–û–í–´–ô –ú–ï–¢–û–î:
  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ ApiService
  Future<void> _initializeApiToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('auth_token');

      if (token != null) {
        _apiService.setAuthToken(token);
        if (kDebugMode) {
          print('‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ApiService –¥–ª—è OrdersProvider');
        }
      } else {
        if (kDebugMode) {
          print('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SharedPreferences –¥–ª—è OrdersProvider');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ OrdersProvider: $e');
      }
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã
  bool get hasOrders => _orders.isNotEmpty;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  bool get hasFilteredOrders => filteredOrders.isNotEmpty;

  /// –û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫–∏
  void clearError() {
    _error = null;
    notifyListeners();
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  void forceUpdate() {
    notifyListeners();
  }
}
