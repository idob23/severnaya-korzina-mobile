// lib/screens/payment/universal_payment_screen.dart - –ü–û–õ–ù–´–ô –§–ê–ô–õ

import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:url_launcher/url_launcher.dart';
import 'dart:async';
import 'payment_service.dart';
import 'package:provider/provider.dart';
import '../../providers/auth_provider.dart';
import '../../providers/cart_provider.dart';
import '../../providers/orders_provider.dart';

class UniversalPaymentScreen extends StatefulWidget {
  final String paymentUrl;
  final String paymentId;
  final String? orderId;
  final bool orderCreated;

  const UniversalPaymentScreen({
    Key? key,
    required this.paymentUrl,
    required this.paymentId,
    this.orderId,
    this.orderCreated = false,
  }) : super(key: key);

  @override
  _UniversalPaymentScreenState createState() => _UniversalPaymentScreenState();
}

class _UniversalPaymentScreenState extends State<UniversalPaymentScreen>
    with WidgetsBindingObserver {
  final PaymentService _paymentService = PaymentService();
  Timer? _statusCheckTimer;
  bool _isChecking = false;
  int _checkAttempts = 0;
  static const int _maxAttempts = 40; // 2 –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã)

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _handlePayment();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _statusCheckTimer?.cancel();
    super.dispose();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ñ–æ–Ω–∞ (–¥–ª—è iOS)
  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      print('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ —Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞');
      // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
      _checkPaymentStatus();
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      if (_statusCheckTimer == null || !_statusCheckTimer!.isActive) {
        _startStatusChecking();
      }
    } else if (state == AppLifecycleState.paused) {
      print('‚è∏Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω');
    }
  }

  Future<void> _handlePayment() async {
    if (!kIsWeb) {
      // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–æ –≤–Ω–µ—à–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ
      await _openPaymentInBrowser();
      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
      _startStatusChecking();
    }
    // –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ UI
  }

  Future<void> _openPaymentManually() async {
    try {
      await launchUrl(
        Uri.parse(widget.paymentUrl),
        mode: LaunchMode.externalApplication,
      );
      _startStatusChecking();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã'),
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
              textColor: Colors.white,
              onPressed: _openPaymentManually,
            ),
          ),
        );
      }
    }
  }

  Future<void> _openPaymentInBrowser() async {
    if (await canLaunchUrl(Uri.parse(widget.paymentUrl))) {
      await launchUrl(
        Uri.parse(widget.paymentUrl),
        mode: LaunchMode.externalApplication,
      );
    }
  }

  void _startStatusChecking() {
    _statusCheckTimer?.cancel();
    _checkAttempts = 0;

    _statusCheckTimer = Timer.periodic(Duration(seconds: 3), (timer) {
      if (_checkAttempts >= _maxAttempts) {
        timer.cancel();
        _showTimeoutDialog();
        return;
      }

      _checkPaymentStatus();
      _checkAttempts++;
    });
  }

  Future<void> _checkPaymentStatus() async {
    if (_isChecking) return;

    setState(() {
      _isChecking = true;
    });

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final token = authProvider.token;

      final status = await _paymentService.checkPaymentStatus(
        widget.paymentId,
        token: token,
      );

      if (!mounted) return;

      if (status.isPaid) {
        _statusCheckTimer?.cancel();
        _handlePaymentSuccess();
      } else if (status.isCanceled) {
        _statusCheckTimer?.cancel();
        _handlePaymentCancelled();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
    }

    if (mounted) {
      setState(() {
        _isChecking = false;
      });
    }
  }

  void _handlePaymentSuccess() async {
    // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    cartProvider.clearCart();
    print('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    final ordersProvider = Provider.of<OrdersProvider>(context, listen: false);
    await ordersProvider.loadOrders();
    print('‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥
    if (mounted) {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          title: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green),
              SizedBox(width: 8),
              Text('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (widget.orderId != null)
                Text('–ó–∞–∫–∞–∑ #${widget.orderId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω'),
              SizedBox(height: 8),
              Text(
                  '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.'),
            ],
          ),
          actions: [
            ElevatedButton(
              onPressed: () {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                Navigator.pushNamedAndRemoveUntil(
                  context,
                  '/',
                  (route) => false,
                );
              },
              child: Text('–í –∫–∞—Ç–∞–ª–æ–≥'),
            ),
          ],
        ),
      );
    }
  }

  void _handlePaymentCancelled() {
    Navigator.pop(context);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.error, color: Colors.orange),
            SizedBox(width: 8),
            Text('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω'),
          ],
        ),
        content: Text('–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('–û–ö'),
          ),
        ],
      ),
    );
  }

  void _showTimeoutDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞'),
        content: Text(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS –æ—Ç –±–∞–Ω–∫–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pop(context);
            },
            child: Text('–í–µ—Ä–Ω—É—Ç—å—Å—è'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _checkAttempts = 0;
              _startStatusChecking();
            },
            child: Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'),
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
      ),
      body: Center(
        child: Padding(
          padding: EdgeInsets.all(24),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                Icons.payment,
                size: 80,
                color: Colors.green,
              ),
              SizedBox(height: 32),
              Text(
                kIsWeb ? '–ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ' : '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.green[700],
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 16),
              Text(
                kIsWeb
                    ? '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.'
                    : '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n–ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              if (widget.orderId != null) ...[
                SizedBox(height: 8),
                Text(
                  '–ó–∞–∫–∞–∑ #${widget.orderId}',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.grey[500],
                  ),
                ),
              ],
              SizedBox(height: 32),

              // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–ø–ª–∞—Ç—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ–±
              if (kIsWeb && !_isChecking) ...[
                SizedBox(
                  width: double.infinity,
                  height: 56,
                  child: ElevatedButton.icon(
                    onPressed: _openPaymentManually,
                    icon: Icon(Icons.open_in_new, size: 24),
                    label: Text(
                      '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
                SizedBox(height: 24),
              ],

              if (_isChecking) ...[
                CircularProgressIndicator(color: Colors.green),
                SizedBox(height: 16),
                Text(
                  '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...',
                  style: TextStyle(color: Colors.grey[600]),
                ),
                SizedBox(height: 16),
              ],

              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: () {
                        _statusCheckTimer?.cancel();
                        Navigator.pop(context);
                      },
                      child: Text('–û—Ç–º–µ–Ω–∏—Ç—å'),
                    ),
                  ),
                  if (!kIsWeb && !_isChecking) ...[
                    SizedBox(width: 16),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _checkPaymentStatus,
                        child: Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'),
                      ),
                    ),
                  ],
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
