// lib/screens/payment/payment_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/user.dart';
import '../../providers/cart_provider.dart';
import '../../providers/auth_provider.dart';
import '../../providers/orders_provider.dart';
import 'payment_service.dart';
import 'payment_success_screen.dart';

class PaymentScreen extends StatefulWidget {
  final Map<String, dynamic> orderData;

  const PaymentScreen({Key? key, required this.orderData}) : super(key: key);

  @override
  _PaymentScreenState createState() => _PaymentScreenState();
}

class _PaymentScreenState extends State<PaymentScreen> {
  final PaymentService _paymentService = PaymentService();
  bool _isProcessing = false;
  String? _currentPaymentId;

  @override
  Widget build(BuildContext context) {
    final double amount = widget.orderData['totalAmount'] ?? 0.0;
    final authProvider = Provider.of<AuthProvider>(context);
    final user = authProvider.currentUser;

    return Scaffold(
      appBar: AppBar(
        title: Text('–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'),
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildOrderSummary(amount),
                    SizedBox(height: 20),
                    _buildPaymentMethod(),
                    SizedBox(height: 20),
                    _buildSecurityInfo(),
                  ],
                ),
              ),
            ),
            _buildPaymentButton(amount, user),
          ],
        ),
      ),
    );
  }

  Widget _buildOrderSummary(double amount) {
    return Card(
      color: Colors.green[50],
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ö –æ–ø–ª–∞—Ç–µ',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:'),
                Text(
                  '${amount.toStringAsFixed(0)} ‚ÇΩ',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.green[700],
                  ),
                ),
              ],
            ),
            SizedBox(height: 12),
            Container(
              width: double.infinity,
              padding: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.green[100],
                borderRadius: BorderRadius.circular(6),
              ),
              child: Text(
                'üí° –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞. –¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏.',
                style: TextStyle(fontSize: 12, color: Colors.green[800]),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPaymentMethod() {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 12),
            Container(
              width: double.infinity,
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.green),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Container(
                    width: 40,
                    height: 25,
                    decoration: BoxDecoration(
                      color: Colors.blue,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Center(
                      child: Text(
                        '–ú–ò–†',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ú–ò–†',
                          style: TextStyle(fontWeight: FontWeight.w500),
                        ),
                        Text(
                          '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.grey[600],
                          ),
                        ),
                      ],
                    ),
                  ),
                  Icon(Icons.security, color: Colors.green),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSecurityInfo() {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Row(
          children: [
            Icon(Icons.security, color: Colors.green),
            SizedBox(width: 12),
            Expanded(
              child: Text(
                '–û–ø–ª–∞—Ç–∞ –∑–∞—â–∏—â–µ–Ω–∞ SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º. –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.',
                style: TextStyle(fontSize: 12, color: Colors.grey[600]),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPaymentButton(double amount, User? user) {
    return SizedBox(
      width: double.infinity,
      height: 56,
      child: ElevatedButton.icon(
        onPressed: _isProcessing ? null : () => _startPayment(amount, user),
        icon: _isProcessing
            ? SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  color: Colors.white,
                ),
              )
            : Icon(Icons.payment, size: 24),
        label: Text(
          _isProcessing
              ? '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...'
              : '–û–ø–ª–∞—Ç–∏—Ç—å ${amount.toStringAsFixed(0)} ‚ÇΩ',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.green,
          foregroundColor: Colors.white,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
        ),
      ),
    );
  }

  Future<void> _startPayment(double amount, User? user) async {
    setState(() => _isProcessing = true);

    try {
      final orderId = 'ORDER_${DateTime.now().millisecondsSinceEpoch}';
      final result = await _paymentService.createPayment(
        amount: amount,
        orderId: orderId,
        customerPhone: user?.phone ?? '',
        customerName: user?.name ?? '',
      );

      if (!mounted) return;

      if (result.success && result.confirmationUrl != null) {
        _currentPaymentId = result.paymentId;
        _showPaymentDialog(result.confirmationUrl!, result.paymentId!);
      } else {
        _showError(result.message ?? '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ');
    } finally {
      if (mounted) setState(() => _isProcessing = false);
    }
  }

  void _showPaymentDialog(String confirmationUrl, String paymentId) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text('–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.payment, size: 64, color: Colors.blue),
            SizedBox(height: 16),
            Text(
              '–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã –ÆKassa.\n\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
              textAlign: TextAlign.center,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _paymentService.openPaymentForm(confirmationUrl);
              _startPaymentStatusCheck(paymentId);
            },
            child: Text('–û—Ç–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }

  void _startPaymentStatusCheck(String paymentId) {
    Future.delayed(Duration(seconds: 5), () => _checkPaymentStatus(paymentId));
  }

  Future<void> _checkPaymentStatus(String paymentId) async {
    try {
      final status = await _paymentService.checkPaymentStatus(paymentId);

      if (!mounted) return;

      if (status.isPaid) {
        _showPaymentSuccess(paymentId);
      } else if (status.isCanceled) {
        _showError('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω');
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–°—Ç–∞—Ç—É—Å: ${status.status}'),
            action: SnackBarAction(
              label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞',
              onPressed: () => _checkPaymentStatus(paymentId),
            ),
          ),
        );
      }
    } catch (e) {
      _showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  }

  void _showPaymentSuccess(String paymentId) {
    if (!mounted) return;

    _createOrderInSystem(paymentId);

    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (_) => PaymentSuccessScreen()),
    );

    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    cartProvider.clearCart();
  }

  Future<void> _createOrderInSystem(String paymentId) async {
    try {
      final ordersProvider =
          Provider.of<OrdersProvider>(context, listen: false);
      await ordersProvider.createOrder(
        addressId: 1,
        items: widget.orderData['items'] as List<Map<String, dynamic>>,
        notes:
            '–ü–ª–∞—Ç–µ–∂ ID: $paymentId\n–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${widget.orderData['deliveryTime']}\n${widget.orderData['notes'] ?? ''}',
      );
    } catch (e) {
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
    }
  }

  void _showError(String message) {
    if (!mounted) return;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.error, color: Colors.red),
            SizedBox(width: 8),
            Text('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'),
          ],
        ),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('–û–ö'),
          ),
        ],
      ),
    );
  }
}
