// lib/screens/payment/payment_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/cart_provider.dart';
import '../../providers/auth_provider.dart';
import 'payment_service.dart';
import 'payment_success_screen.dart';

class PaymentScreen extends StatefulWidget {
  @override
  _PaymentScreenState createState() => _PaymentScreenState();
}

class _PaymentScreenState extends State<PaymentScreen> {
  final PaymentService _paymentService = PaymentService();
  bool _isProcessing = false;
  String? _currentPaymentId;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Consumer2<CartProvider, AuthProvider>(
        builder: (context, cartProvider, authProvider, child) {
          final user = authProvider.currentUser;
          final total = cartProvider.totalAmount;
          final prepayment = total * 0.9;
          final remaining = total * 0.1;

          return Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
                      _buildOrderSummary(
                          cartProvider, total, prepayment, remaining),
                      SizedBox(height: 16),

                      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                      _buildUserInfo(user),
                      SizedBox(height: 16),

                      // –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                      _buildPaymentMethods(),
                    ],
                  ),
                ),
              ),

              // –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
              Container(
                width: double.infinity,
                padding: EdgeInsets.all(16),
                child: ElevatedButton(
                  onPressed:
                      _isProcessing ? null : () => _startPayment(context),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                    padding: EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                  child: _isProcessing
                      ? Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                color: Colors.white,
                                strokeWidth: 2,
                              ),
                            ),
                            SizedBox(width: 12),
                            Text('–û–±—Ä–∞–±–æ—Ç–∫–∞...'),
                          ],
                        )
                      : Text(
                          '–û–ø–ª–∞—Ç–∏—Ç—å ${prepayment.toStringAsFixed(0)} ‚ÇΩ',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget _buildOrderSummary(CartProvider cartProvider, double total,
      double prepayment, double remaining) {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 12),

            // –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
            ...cartProvider.itemsList.map((item) => Padding(
                  padding: EdgeInsets.only(bottom: 8),
                  child: Row(
                    children: [
                      Expanded(
                        child: Text('${item.name} x${item.quantity}'),
                      ),
                      Text(
                          '${(item.price * item.quantity).toStringAsFixed(0)} ‚ÇΩ'),
                    ],
                  ),
                )),

            Divider(),

            // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            Row(
              children: [
                Expanded(child: Text('–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:')),
                Text(
                  '${total.toStringAsFixed(0)} ‚ÇΩ',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
              ],
            ),
            SizedBox(height: 8),

            // –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
            Row(
              children: [
                Expanded(child: Text('–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ (90%):')),
                Text(
                  '${prepayment.toStringAsFixed(0)} ‚ÇΩ',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.blue,
                  ),
                ),
              ],
            ),
            SizedBox(height: 4),

            // –î–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
            Row(
              children: [
                Expanded(child: Text('–î–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:')),
                Text(
                  '${remaining.toStringAsFixed(0)} ‚ÇΩ',
                  style: TextStyle(color: Colors.grey[600]),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildUserInfo(user) {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 12),
            _buildInfoRow(Icons.person, user?.fullName ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            _buildInfoRow(Icons.phone, user?.phone ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
            if (user?.email != null) _buildInfoRow(Icons.email, user!.email!),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(IconData icon, String text) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(icon, size: 20, color: Colors.grey[600]),
          SizedBox(width: 8),
          Text(text),
        ],
      ),
    );
  }

  Widget _buildPaymentMethods() {
    return Card(
      child: Padding(
        padding: EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 12),
            ListTile(
              leading: Icon(Icons.credit_card, color: Colors.blue),
              title: Text('–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –ú–ò–†'),
              subtitle: Text('–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa'),
              trailing: Radio<String>(
                value: 'card',
                groupValue: 'card',
                onChanged: (value) {},
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _startPayment(BuildContext context) async {
    if (!mounted) return;

    setState(() => _isProcessing = true);

    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      final cartProvider = Provider.of<CartProvider>(context, listen: false);
      final authProvider = Provider.of<AuthProvider>(context, listen: false);

      final user = authProvider.currentUser;
      final total = cartProvider.totalAmount;
      final prepayment = total * 0.9;

      print('üí≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã...');
      print('–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${prepayment.toStringAsFixed(2)} ‚ÇΩ');

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa - –ò–°–ü–†–ê–í–õ–ï–ù–û
      final result = await _paymentService.createMirPayment(
        amount: prepayment,
        orderId: 'ORDER_${DateTime.now().millisecondsSinceEpoch}',
        customerPhone: user?.phone ?? '',
        customerName: user?.fullName ?? '',
      );

      if (!mounted) return;

      if (result.success && result.confirmationUrl != null) {
        _currentPaymentId = result.paymentId;

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É
        final opened =
            await _paymentService.openPaymentForm(result.confirmationUrl!);

        if (opened) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ–∂–∏–¥–∞–Ω–∏—è
          if (result.paymentId != null) {
            _showPaymentPendingDialog(result.paymentId!);
          }
        } else {
          _showError('–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É');
        }
      } else {
        _showError(result.message);
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: $e');
      _showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: $e');
    } finally {
      if (mounted) {
        setState(() => _isProcessing = false);
      }
    }
  }

  void _showPaymentPendingDialog(String paymentId) {
    if (!mounted) return;

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text('–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text(
                '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _checkPaymentStatus(paymentId);
            },
            child: Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'),
          ),
        ],
      ),
    );
  }

  Future<void> _checkPaymentStatus(String paymentId) async {
    if (!mounted) return;

    try {
      print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...');

      final status = await _paymentService.checkPaymentStatus(paymentId);

      if (!mounted) return;

      if (status.isPaid) {
        print('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        _showPaymentSuccess(paymentId, status.amount);
      } else if (status.isCanceled) {
        _showError('–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content:
                Text('–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –°—Ç–∞—Ç—É—Å: ${status.status}'),
          ),
        );
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
      _showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
    }
  }

  void _showPaymentSuccess(String paymentId, double amount) {
    if (!mounted) return;

    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      final cartProvider = Provider.of<CartProvider>(context, listen: false);

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (_) => PaymentSuccessScreen(
            orderId: paymentId,
            amount: amount,
            paymentMethod: '–ö–∞—Ä—Ç–∞ –ú–ò–†',
          ),
        ),
      );

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É - –ò–°–ü–†–ê–í–õ–ï–ù–û
      cartProvider.clearCart();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —ç–∫—Ä–∞–Ω—É —É—Å–ø–µ—Ö–∞: $e');
    }
  }

  void _showError(String message) {
    if (!mounted) return;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã'),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('–û–ö'),
          ),
        ],
      ),
    );
  }
}
