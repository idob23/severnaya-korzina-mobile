import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:url_launcher/url_launcher.dart';

class PaymentService {
  // –ÆKassa API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  static const String _baseUrl = 'https://api.yookassa.ru/v3';

  // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ÆKassa
  static const String _shopId = '123456'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à shopId
  static const String _secretKey =
      'test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á

  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏, –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ - –±–æ–µ–≤—ã–µ

  /// –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa
  Future<PaymentResult> createMirPayment({
    required double amount,
    required String orderId,
    required String customerPhone,
    required String customerName,
  }) async {
    try {
      print('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É: $amount —Ä—É–±.');

      final String basicAuth =
          base64Encode(utf8.encode('$_shopId:$_secretKey'));
      final String idempotenceKey =
          'order_${orderId}_${DateTime.now().millisecondsSinceEpoch}';

      final requestBody = {
        'amount': {
          'value': amount.toStringAsFixed(2),
          'currency': 'RUB',
        },
        'confirmation': {
          'type': 'redirect',
          'return_url':
              'https://your-app.com/payment-success', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
        },
        'capture': true,
        'description': '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ $orderId –≤ –°–µ–≤–µ—Ä–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ',
        'metadata': {
          'order_id': orderId,
          'customer_phone': customerPhone,
          'customer_name': customerName,
          'app_name': 'severnaya_korzina',
        },
        'payment_method_data': {
          'type': 'bank_card',
        },
        'receipt': {
          'customer': {
            'phone': customerPhone,
          },
          'items': [
            {
              'description': '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä—ã (–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –∑–∞–∫—É–ø–∫–∞)',
              'quantity': '1.00',
              'amount': {
                'value': amount.toStringAsFixed(2),
                'currency': 'RUB',
              },
              'vat_code': 1, // –ù–î–° 20%
            }
          ],
        },
      };

      print('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ÆKassa...');

      final response = await http.post(
        Uri.parse('$_baseUrl/payments'),
        headers: {
          'Authorization': 'Basic $basicAuth',
          'Content-Type': 'application/json',
          'Idempotence-Key': idempotenceKey,
        },
        body: jsonEncode(requestBody),
      );

      print('üì• –û—Ç–≤–µ—Ç –ÆKassa: ${response.statusCode}');

      if (response.statusCode == 200 || response.statusCode == 201) {
        final data = jsonDecode(response.body);
        print('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${data['id']}');

        return PaymentResult(
          success: true,
          paymentId: data['id'],
          status: data['status'],
          confirmationUrl: data['confirmation']['confirmation_url'],
          message: '–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        );
      } else {
        final errorData = jsonDecode(response.body);
        print('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${errorData['description']}');

        return PaymentResult(
          success: false,
          message: errorData['description'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        );
      }
    } catch (e) {
      print('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: $e');
      return PaymentResult(
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: $e',
      );
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  Future<PaymentStatus> checkPaymentStatus(String paymentId) async {
    try {
      print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: $paymentId');

      final String basicAuth =
          base64Encode(utf8.encode('$_shopId:$_secretKey'));

      final response = await http.get(
        Uri.parse('$_baseUrl/payments/$paymentId'),
        headers: {
          'Authorization': 'Basic $basicAuth',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final status = data['status'];

        print('üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: $status');

        return PaymentStatus(
          paymentId: paymentId,
          status: status,
          isPaid: status == 'succeeded',
          isCanceled: status == 'canceled',
          isPending: status == 'pending',
          amount: double.parse(data['amount']['value']),
          createdAt: DateTime.parse(data['created_at']),
          paidAt:
              data['paid_at'] != null ? DateTime.parse(data['paid_at']) : null,
        );
      } else {
        throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${response.statusCode}');
      }
    } catch (e) {
      print('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
      throw Exception('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: $e');
    }
  }

  /// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  Future<bool> openPaymentForm(String confirmationUrl) async {
    try {
      print('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Ñ–æ—Ä–º—É: $confirmationUrl');

      final Uri url = Uri.parse(confirmationUrl);

      if (await canLaunchUrl(url)) {
        final result = await launchUrl(
          url,
          mode: LaunchMode.externalApplication,
        );
        print('üöÄ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞: $result');
        return result;
      } else {
        print('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å URL: $confirmationUrl');
        return false;
      }
    } catch (e) {
      print('üí• –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –ø–µ—Å–æ—á–Ω–∏—Ü—ã
  static Map<String, String> getTestCards() {
    return {
      '–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞': '5555555555554444',
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤': '5555555555554477',
      '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–∞–Ω–∫–æ–º': '5555555555554485',
      '–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞': '5555555555554493',
    };
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  static bool isTestMode() {
    return _secretKey.startsWith('test_');
  }
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
class PaymentResult {
  final bool success;
  final String? paymentId;
  final String? status;
  final String? confirmationUrl;
  final String message;

  PaymentResult({
    required this.success,
    this.paymentId,
    this.status,
    this.confirmationUrl,
    required this.message,
  });
}

/// –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
class PaymentStatus {
  final String paymentId;
  final String status;
  final bool isPaid;
  final bool isCanceled;
  final bool isPending;
  final double amount;
  final DateTime createdAt;
  final DateTime? paidAt;

  PaymentStatus({
    required this.paymentId,
    required this.status,
    required this.isPaid,
    required this.isCanceled,
    required this.isPending,
    required this.amount,
    required this.createdAt,
    this.paidAt,
  });
}
