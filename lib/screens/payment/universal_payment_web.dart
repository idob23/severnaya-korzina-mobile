// lib/screens/payment/universal_payment_screen.dart
// –í–ï–†–°–ò–Ø –° –û–¢–ö–ê–¢–û–ú –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–û–ì–û –ó–ê–ö–ê–ó–ê

import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:url_launcher/url_launcher.dart';
import 'dart:async';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'payment_service.dart';
import 'package:provider/provider.dart';
import '../../providers/auth_provider.dart';
import '../../providers/cart_provider.dart';
import '../../providers/orders_provider.dart';
import 'package:web/web.dart' as web;
import '../home/home_screen.dart';

class UniversalPaymentScreen extends StatefulWidget {
  final String paymentUrl;
  final String paymentId;
  final String? orderId;
  final bool orderCreated;
  final Map<String, dynamic>?
      orderData; // ‚úÖ –ù–û–í–û–ï: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã

  const UniversalPaymentScreen({
    Key? key,
    required this.paymentUrl,
    required this.paymentId,
    this.orderId,
    this.orderCreated = false,
    this.orderData, // ‚úÖ –ù–û–í–û–ï
  }) : super(key: key);

  @override
  _UniversalPaymentScreenState createState() => _UniversalPaymentScreenState();
}

class _UniversalPaymentScreenState extends State<UniversalPaymentScreen>
    with WidgetsBindingObserver {
  final PaymentService _paymentService = PaymentService();
  Timer? _statusCheckTimer;
  Timer? _autoRollbackTimer; // ‚úÖ –ù–û–í–û–ï: –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
  bool _isChecking = false;
  bool _paymentCompleted = false; // ‚úÖ –ù–û–í–û–ï: –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
  bool _paymentCancelled = false; // ‚úÖ –ù–û–í–´–ô —Ñ–ª–∞–≥
  int _checkAttempts = 0;
  static const int _maxAttempts = 40;
  static const int _autoRollbackMinutes = 2; // ‚úÖ –ö–æ—Ä–æ—á–µ –¥–ª—è Web

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _handlePayment();
    _startAutoRollbackTimer(); // ‚úÖ –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _statusCheckTimer?.cancel();
    _autoRollbackTimer?.cancel(); // ‚úÖ –ù–û–í–û–ï
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    if (state == AppLifecycleState.resumed) {
      print('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ —Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞');
      // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      Future.delayed(Duration(seconds: 1), () {
        if (mounted && !_paymentCompleted) {
          _checkPaymentStatusOnResume();
        }
      });
      if (_statusCheckTimer == null || !_statusCheckTimer!.isActive) {
        _startStatusChecking();
      }
    } else if (state == AppLifecycleState.paused) {
      print('‚è∏Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—à–ª–æ –≤ —Ñ–æ–Ω');
    }
  }

  Future<void> _handlePayment() async {
    if (!kIsWeb) {
      await _openPaymentInBrowser();
    }
    // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –í–°–ï–• –ø–ª–∞—Ç—Ñ–æ—Ä–º (–≤–∫–ª—é—á–∞—è Web)
    _startStatusChecking();
  }

  Future<void> _openPaymentManually() async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
      final screenWidth = web.window.screen.width;
      final screenHeight = web.window.screen.height;

      // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä (70% x 80%)
      final popupWidth = (screenWidth * 0.7).round();
      final popupHeight = (screenHeight * 0.8).round();

      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
      const minWidth = 400;
      const minHeight = 600;

      final finalWidth = popupWidth < minWidth ? minWidth : popupWidth;
      final finalHeight = popupHeight < minHeight ? minHeight : popupHeight;

      // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
      final left = ((screenWidth - finalWidth) / 2).round();
      final top = ((screenHeight - finalHeight) / 2).round();

      // –û—Ç–∫—Ä—ã–≤–∞–µ–º popup
      web.window.open(
        widget.paymentUrl,
        '_blank',
        'width=$finalWidth,height=$finalHeight,left=$left,top=$top,'
            'menubar=no,toolbar=no,location=yes,status=no,resizable=yes,scrollbars=yes',
      );

      print('‚úÖ Popup –æ—Ç–∫—Ä—ã—Ç: ${finalWidth}x${finalHeight} –ø–æ —Ü–µ–Ω—Ç—Ä—É');

      _startStatusChecking();
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–∞: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã'),
            backgroundColor: Colors.red,
            action: SnackBarAction(
              label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
              textColor: Colors.white,
              onPressed: _openPaymentManually,
            ),
          ),
        );
      }
    }
  }

  Future<void> _openPaymentInBrowser() async {
    if (await canLaunchUrl(Uri.parse(widget.paymentUrl))) {
      await launchUrl(
        Uri.parse(widget.paymentUrl),
        mode: LaunchMode.externalApplication,
      );
    }
  }

  void _startStatusChecking() {
    _statusCheckTimer?.cancel();
    _checkAttempts = 0;

    _statusCheckTimer = Timer.periodic(Duration(seconds: 3), (timer) {
      if (_checkAttempts >= _maxAttempts) {
        timer.cancel();
        _showTimeoutDialog();
        return;
      }

      _checkPaymentStatus();
      _checkAttempts++;
    });
  }

  // ‚úÖ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  void _startAutoRollbackTimer() {
    // ‚úÖ –î–ª—è Web 5 –º–∏–Ω—É—Ç (–¥–∞—ë–º –≤—Ä–µ–º—è webhook/cron), –¥–ª—è Mobile 2 –º–∏–Ω—É—Ç—ã
    final rollbackDuration =
        kIsWeb ? Duration(minutes: 5) : Duration(minutes: _autoRollbackMinutes);

    _autoRollbackTimer = Timer(
      rollbackDuration,
      () async {
        // ‚úÖ –î–û–ë–ê–í–õ–ï–ù async
        if (!_paymentCompleted && mounted) {
          print(
              '‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...');
          await _finalCheckBeforeRollback();
        }
      },
    );
  }

  // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º
  Future<void> _finalCheckBeforeRollback() async {
    print('üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –æ—Ç–∫–∞—Ç–æ–º –∑–∞–∫–∞–∑–∞...');

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final token = authProvider.token;

      final status = await _paymentService.checkPaymentStatus(
        widget.paymentId,
        token: token,
      );

      if (status.isPaid) {
        print('‚úÖ –ü–õ–ê–¢–Å–ñ –û–ü–õ–ê–ß–ï–ù! –û—Ç–º–µ–Ω—è–µ–º –æ—Ç–∫–∞—Ç!');
        _paymentCompleted = true;
        _statusCheckTimer?.cancel();
        _autoRollbackTimer?.cancel();
        _handlePaymentSuccess();
        return;
      }

      if (status.isPending) {
        print('‚è≥ –°—Ç–∞—Ç—É—Å –≤—Å—ë –µ—â—ë PENDING, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã...');
        // –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        _autoRollbackTimer = Timer(Duration(minutes: 2), () async {
          if (!_paymentCompleted && mounted) {
            await _finalCheckBeforeRollback(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          }
        });
        return;
      }

      // –°—Ç–∞—Ç—É—Å FAILED –∏–ª–∏ CANCELED
      print('‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –æ–ø–ª–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${status.status}), –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: $e');
    }

    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    await _handlePaymentCancelled();
  }

  // ‚úÖ –°–¢–ê–†–´–ô –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (—Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π)
  Future<void> _handleAutoRollback() async {
    await _finalCheckBeforeRollback();
  }

  Future<void> _checkPaymentStatus() async {
    if (_isChecking || _paymentCompleted) return;

    setState(() {
      _isChecking = true;
    });

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final token = authProvider.token;

      final status = await _paymentService.checkPaymentStatus(
        widget.paymentId,
        token: token,
      );

      if (!mounted) return;

      if (status.isPaid) {
        _paymentCompleted = true; // ‚úÖ –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        _statusCheckTimer?.cancel();
        // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É
        if (kIsWeb) {
          _showPaymentSuccessDialog();
        } else {
          _handlePaymentSuccess();
        }
      } else if (status.isCanceled) {
        _statusCheckTimer?.cancel();
        await _handlePaymentCancelled();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: $e');
    }

    if (mounted) {
      setState(() {
        _isChecking = false;
      });
    }
  }

  // ‚úÖ –ù–û–í–û–ï: –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞ –¥–ª—è Web (–∫–æ–≥–¥–∞ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ A)
  void _showPaymentSuccessDialog() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.check_circle, color: Colors.green, size: 64),
            SizedBox(height: 16),
            Text(
              '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: Colors.green[700],
              ),
            ),
            SizedBox(height: 12),
            Text(
              '–í–∞—à –∑–∞–∫–∞–∑ #${widget.orderId ?? "..."} –æ–ø–ª–∞—á–µ–Ω\n–∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context); // –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
              Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      HomeScreen(initialIndex: 2), // ‚úÖ index 2 = Orders tab
                ),
                (route) => false,
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
            ),
            child: Text('–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º'),
          ),
        ],
      ),
    );
  }

  // ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ñ–æ–Ω–∞ —Å –ø–æ–∫–∞–∑–æ–º –¥–∏–∞–ª–æ–≥–∞
  Future<void> _checkPaymentStatusOnResume() async {
    if (_paymentCompleted) return;

    print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞...');

    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final token = authProvider.token;

      final status = await _paymentService.checkPaymentStatus(
        widget.paymentId,
        token: token,
      );

      if (!mounted) return;

      if (status.isPaid) {
        _paymentCompleted = true;
        _statusCheckTimer?.cancel();
        _autoRollbackTimer?.cancel(); // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
        _handlePaymentSuccess();
      } else if (status.isCanceled) {
        _statusCheckTimer?.cancel();
        _autoRollbackTimer?.cancel(); // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        await _handlePaymentCancelled();
      } else if (status.isPending) {
        // // ‚úÖ –í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ pending, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // _showPaymentStatusDialog();
        print(
            '‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...');
        print(
            '‚è±Ô∏è –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç');
        // –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã (_autoRollbackTimer) —Å–∞–º –æ—Ç–º–µ–Ω–∏—Ç –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ: $e');
    }
  }

  // // ‚úÖ –ù–û–í–û–ï: –î–∏–∞–ª–æ–≥ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
  // void _showPaymentStatusDialog() {
  //   showDialog(
  //     context: context,
  //     barrierDismissible: false,
  //     builder: (context) => AlertDialog(
  //       title: Row(
  //         children: [
  //           Icon(Icons.help_outline, color: Colors.blue),
  //           SizedBox(width: 8),
  //           Text('–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã'),
  //         ],
  //       ),
  //       content: Text(
  //         '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É?\n\n–ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –º—ã —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã –∑–∞–∫—Ä—ã–ª–∏ –æ–∫–Ω–æ –æ–ø–ª–∞—Ç—ã, –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.',
  //       ),
  //       actions: [
  //         TextButton(
  //           onPressed: () {
  //             Navigator.pop(context);
  //             // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–∫–Ω–æ - –æ—Ç–º–µ–Ω—è–µ–º
  //             _handlePaymentCancelled();
  //           },
  //           child: Text('–Ø –Ω–µ –æ–ø–ª–∞—Ç–∏–ª, –æ—Ç–º–µ–Ω–∏—Ç—å'),
  //         ),
  //         ElevatedButton(
  //           onPressed: () {
  //             Navigator.pop(context);
  //             // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
  //             print('‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã...');
  //           },
  //           child: Text('–Ø –æ–ø–ª–∞—Ç–∏–ª, –∂–¥–∞—Ç—å'),
  //         ),
  //       ],
  //     ),
  //   );
  // }

  void _handlePaymentSuccess() async {
    print('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    _statusCheckTimer?.cancel();
    _autoRollbackTimer?.cancel();

    // ‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –æ—á–∏—â–µ–Ω–∞ –≤ checkout_screen, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã
    // (–ù–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏, clearCart() –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω—ã)
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    cartProvider.clearCart();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    final ordersProvider = Provider.of<OrdersProvider>(context, listen: false);
    await ordersProvider.loadOrders();

    if (mounted) {
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => AlertDialog(
          title: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green),
              SizedBox(width: 8),
              Text('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              if (widget.orderId != null)
                Text('–ó–∞–∫–∞–∑ #${widget.orderId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω'),
              SizedBox(height: 8),
              Text(
                '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.',
              ),
            ],
          ),
          actions: [
            ElevatedButton(
              onPressed: () {
                Navigator.pushNamedAndRemoveUntil(
                  context,
                  '/',
                  (route) => false,
                );
              },
              child: Text('–í –∫–∞—Ç–∞–ª–æ–≥'),
            ),
          ],
        ),
      );
    }
  }

  // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç–∫–∞—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
  Future<void> _handlePaymentCancelled() async {
    // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–û–ì–û –í–´–ó–û–í–ê
    if (_paymentCancelled) {
      print('‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    _paymentCancelled = true; // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
    print('‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    _statusCheckTimer?.cancel();
    _autoRollbackTimer?.cancel(); // ‚úÖ –ù–û–í–û–ï

    // 1. –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ —Å backend (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω)
    if (widget.orderId != null && widget.orderCreated) {
      await _deleteUnpaidOrder(widget.orderId!);
    }

    // 2. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
    if (widget.orderData != null) {
      await _restoreCartItems();
    }

    if (mounted) {
      Navigator.pop(context);

      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          contentPadding: EdgeInsets.fromLTRB(24, 20, 24, 0), // ‚Üê –ù–û–í–û–ï
          actionsPadding: EdgeInsets.only(right: 16, bottom: 8), // ‚Üê –ù–û–í–û–ï
          title: Row(
            children: [
              Icon(Icons.info_outline, color: Colors.orange),
              SizedBox(width: 8),
              Flexible(
                // ‚Üê –ù–û–í–û–ï: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
                child: Text('–û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'),
              ),
            ],
          ),
          content: ConstrainedBox(
            // ‚Üê –ù–û–í–û–ï: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
            constraints: BoxConstraints(maxWidth: 280),
            child: Text(
              '–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω. –¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.',
              style: TextStyle(fontSize: 14),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              style: TextButton.styleFrom(
                padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
              ),
              child: Text('–û–ö'),
            ),
          ],
        ),
      );
    }
  }

  // ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
  Future<void> _deleteUnpaidOrder(String orderId) async {
    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final token = authProvider.token;

      print('üóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #$orderId');

      final response = await http.delete(
        Uri.parse('https://api.sevkorzina.ru/api/orders/$orderId'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        print('‚úÖ –ó–∞–∫–∞–∑ #$orderId —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      } else {
        print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${response.statusCode}');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: $e');
    }
  }

  // ‚úÖ –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É
  Future<void> _restoreCartItems() async {
    try {
      final cartProvider = Provider.of<CartProvider>(context, listen: false);
      final items = widget.orderData!['items'] as List<Map<String, dynamic>>?;

      if (items != null && items.isNotEmpty) {
        print('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É');

        for (var item in items) {
          final productId = item['productId'] as int;
          final quantity = item['quantity'] as int;

          // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ price
          final priceValue = item['price'];
          final price = priceValue is double
              ? priceValue
              : (priceValue is int
                  ? priceValue.toDouble()
                  : double.parse(priceValue.toString()));

          final name = item['name'] as String? ?? '–¢–æ–≤–∞—Ä #$productId';
          final unit = item['unit'] as String? ?? '—à—Ç';

          cartProvider.addItem(
            productId: productId,
            name: name,
            price: price,
            unit: unit,
            quantity: quantity,
          );
        }

        print('‚úÖ –¢–æ–≤–∞—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É (${items.length} –ø–æ–∑–∏—Ü–∏–π)');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: $e');
      print('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: $e');
    }
  }

  void _showTimeoutDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞'),
        content: Text(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SMS –æ—Ç –±–∞–Ω–∫–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.',
        ),
        actions: [
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              // –ü—Ä–∏ —Ç–∞–π–º-–∞—É—Ç–µ —Ç–æ–∂–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
              await _handlePaymentCancelled();
            },
            child: Text('–í–µ—Ä–Ω—É—Ç—å—Å—è'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _checkAttempts = 0;
              _startStatusChecking();
            },
            child: Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑'),
          ),
        ],
      ),
    );
  }

  // ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  Future<bool> _onWillPop() async {
    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã—Ö–æ–¥
    if (_paymentCompleted) {
      return true;
    }

    // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    final shouldPop = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É?'),
        content: Text(
          '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É? –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω, –∞ —Ç–æ–≤–∞—Ä—ã –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É.',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: Text('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–ª–∞—Ç—É'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange,
            ),
            child: Text('–û—Ç–º–µ–Ω–∏—Ç—å'),
          ),
        ],
      ),
    );

    if (shouldPop == true) {
      await _handlePaymentCancelled();
    }

    return shouldPop ?? false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop, // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
      child: Scaffold(
        appBar: AppBar(
          title: Text('–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞'),
          backgroundColor: Colors.green,
          foregroundColor: Colors.white,
        ),
        body: Center(
          child: Padding(
            padding: EdgeInsets.all(24),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.payment,
                  size: 80,
                  color: Colors.green,
                ),
                SizedBox(height: 32),
                Text(
                  kIsWeb ? '–ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ' : '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                    color: Colors.green[700],
                  ),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 16),
                Text(
                  kIsWeb
                      ? '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\nPopup –æ–∫–Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞.'
                      : '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ.\n–ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
                if (widget.orderId != null) ...[
                  SizedBox(height: 8),
                  Text(
                    '–ó–∞–∫–∞–∑ #${widget.orderId}',
                    style: TextStyle(
                      fontSize: 14,
                      color: Colors.grey[500],
                    ),
                  ),
                ],
                SizedBox(height: 32),
                if (kIsWeb && !_isChecking) ...[
                  SizedBox(
                    width: double.infinity,
                    height: 56,
                    child: ElevatedButton.icon(
                      onPressed: _openPaymentManually,
                      icon: Icon(Icons.open_in_new, size: 24),
                      label: Text(
                        '–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                  ),

                  // // ===== –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –°–¢–†–û–ö–ò =====
                  // SizedBox(height: 16),
                  // SizedBox(
                  //   width: double.infinity,
                  //   height: 56,
                  //   child: ElevatedButton.icon(
                  //     onPressed: () async {
                  //       setState(() {
                  //         _isChecking = true;
                  //       });

                  //       await Future.delayed(Duration(seconds: 1));
                  //       await _checkPaymentStatus();

                  //       if (mounted) {
                  //         setState(() {
                  //           _isChecking = false;
                  //         });
                  //       }
                  //     },
                  //     icon: Icon(Icons.check_circle_outline, size: 24),
                  //     label: Text(
                  //       '–Ø –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É',
                  //       style: TextStyle(
                  //         fontSize: 18,
                  //         fontWeight: FontWeight.bold,
                  //       ),
                  //     ),
                  //     style: ElevatedButton.styleFrom(
                  //       backgroundColor: Colors.blue,
                  //       foregroundColor: Colors.white,
                  //       shape: RoundedRectangleBorder(
                  //         borderRadius: BorderRadius.circular(12),
                  //       ),
                  //     ),
                  //   ),
                  // ),
                  // // ===== –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø =====

                  SizedBox(height: 24),
                ],
                if (_isChecking) ...[
                  CircularProgressIndicator(color: Colors.green),
                  SizedBox(height: 16),
                  Text(
                    '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...',
                    style: TextStyle(color: Colors.grey[600]),
                  ),
                  SizedBox(height: 16),
                ],
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton(
                        onPressed: () async {
                          _statusCheckTimer?.cancel();
                          await _handlePaymentCancelled();
                        },
                        child: Text('–û—Ç–º–µ–Ω–∏—Ç—å'),
                      ),
                    ),
                    if (!kIsWeb && !_isChecking) ...[
                      SizedBox(width: 16),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: _checkPaymentStatus,
                          child: Text('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'),
                        ),
                      ),
                    ],
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
