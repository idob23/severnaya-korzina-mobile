// lib/screens/checkout/checkout_screen.dart
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä–∑–∏–Ω–∞ –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:severnaya_korzina/screens/payment/payment_screen.dart';
import '../../providers/cart_provider.dart';
import '../../providers/auth_provider.dart';
import '../../models/user.dart';
import '../../services/api_service.dart';
import '../../design_system/colors/app_colors.dart';
import '../../design_system/colors/gradients.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class CheckoutScreen extends StatefulWidget {
  @override
  _CheckoutScreenState createState() => _CheckoutScreenState();
}

class _CheckoutScreenState extends State<CheckoutScreen>
    with SingleTickerProviderStateMixin {
  final ApiService _apiService = ApiService();
  String _selectedDeliveryTime = '–í –ª—é–±–æ–µ –≤—Ä–µ–º—è';
  String _notes = '';
  bool _isProcessing = false;
  double _marginPercent = 50.0;
  bool _isLoadingMargin = true;
  bool _hasLoadedMargin = false; // ‚Üê –î–û–ë–ê–í–ò–¢–¨

  final TextEditingController _notesController = TextEditingController();

  late AnimationController _animationController;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();

    _animationController = AnimationController(
      duration: Duration(milliseconds: 600),
      vsync: this,
    );
    _fadeAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeIn,
    );
    _animationController.forward();
  }

  // ‚ú® –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ú–ï–¢–û–î:
  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_hasLoadedMargin) {
      _loadMarginPercent();
      _hasLoadedMargin = true;
    }
  }

  // –î–û–ë–ê–í–¨–¢–ï —ç—Ç–æ—Ç –º–µ—Ç–æ–¥:
  Future<void> _loadMarginPercent() async {
    try {
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∂—É –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Ä—Ç–∏–∏...');

      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final token = authProvider.token;

      final batchResponse = await http.get(
        Uri.parse('https://api.sevkorzina.ru/api/batches/active'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (batchResponse.statusCode == 200 && mounted) {
        final batchData = json.decode(batchResponse.body);

        // üîç –î–ï–ë–ê–ì: –°–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—à–ª–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
        print('üì¶ –î–ï–ë–ê–ì: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
        print(batchResponse.body);
        print('üìä –î–ï–ë–ê–ì: batch –æ–±—ä–µ–∫—Ç: ${batchData['batch']}');
        print(
            'üí∞ –î–ï–ë–ê–ì: marginPercent –∑–Ω–∞—á–µ–Ω–∏–µ: ${batchData['batch']?['marginPercent']}');
        print(
            'üî¢ –î–ï–ë–ê–ì: —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${batchData['batch']?['marginPercent'].runtimeType}');

        final newMargin = double.tryParse(
                batchData['batch']?['marginPercent']?.toString() ?? '50') ??
            50.0;

        setState(() {
          _marginPercent = newMargin;
          _isLoadingMargin = false;
        });

        print('‚úÖ –ú–∞—Ä–∂–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $_marginPercent%'); // ‚Üê –î–û–ë–ê–í–ò–¢–¨ –õ–û–ì
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä–∂–∏: $e');
      if (mounted) {
        setState(() {
          _isLoadingMargin = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _notesController.dispose();
    _animationController.dispose();
    super.dispose();
  }

  Future<void> _createOrder() async {
    if (_isProcessing) return;

    setState(() {
      _isProcessing = true;
    });

    HapticFeedback.mediumImpact();

    try {
      final cartProvider = Provider.of<CartProvider>(context, listen: false);
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      final user = authProvider.currentUser;

      if (user?.id == null) {
        throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å—Ç—å –ª–∏ –∞–¥—Ä–µ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
      if (user == null || user.defaultAddress == null) {
        throw Exception('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ');
      }

      // ‚úÖ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –î–û –ø–µ—Ä–µ—Ö–æ–¥–∞
      final double baseAmount = cartProvider.totalAmount;
      final double marginAmount = baseAmount * (_marginPercent / 100);
      final double totalAmount = baseAmount + marginAmount; // ‚úÖ –° –º–∞—Ä–∂–æ–π!
      final List<Map<String, dynamic>> items = cartProvider.itemsList
          .map((item) => {
                'productId': item.productId,
                'quantity': item.quantity,
                'price': item.price,
                'name': item.name, // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º name
                'unit': item.unit, // ‚úÖ –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º unit
              })
          .toList();

      if (!mounted) return;

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –¢–û–ß–ù–û —Ç–µ —Ç–æ–≤–∞—Ä—ã
      cartProvider.clearCart();
      print('üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –æ–ø–ª–∞—Ç–µ');

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final realAddressId = user.defaultAddress!.id!;

      print('üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å ID: $realAddressId');
      print('üìç –ê–¥—Ä–µ—Å: ${user.defaultAddress!.address}');

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (context) => PaymentScreen(
            orderData: {
              'totalAmount': totalAmount,
              'items': items,
              'notes': _notes,
              'addressId': realAddressId,
              'deliveryTime': _selectedDeliveryTime,
            },
          ),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞: ${e.toString()}'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      if (mounted) {
        setState(() {
          _isProcessing = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);
    final authProvider = Provider.of<AuthProvider>(context);
    final user = authProvider.currentUser;

    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              AppColors.background,
              AppColors.ice,
              AppColors.aurora3.withOpacity(0.05),
            ],
          ),
        ),
        child: SafeArea(
          child: FadeTransition(
            opacity: _fadeAnimation,
            child: Column(
              children: [
                // AppBar
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: [
                        AppColors.primaryDark.withOpacity(0.9),
                        AppColors.primaryLight.withOpacity(0.8),
                      ],
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: AppColors.primaryLight.withOpacity(0.3),
                        blurRadius: 15,
                        offset: Offset(0, 5),
                      ),
                    ],
                  ),
                  child: Row(
                    children: [
                      IconButton(
                        icon: Icon(Icons.arrow_back, color: Colors.white),
                        onPressed: () => Navigator.pop(context),
                      ),
                      Expanded(
                        child: Text(
                          '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.w600,
                            color: Colors.white,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                      SizedBox(width: 48),
                    ],
                  ),
                ),

                // –ö–æ–Ω—Ç–µ–Ω—Ç
                Expanded(
                  child: ListView(
                    padding: EdgeInsets.all(16),
                    children: [
                      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                      _buildUserInfoCard(user),
                      SizedBox(height: 16),

                      // –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                      _buildOrderDetailsCard(cartProvider),
                      SizedBox(height: 16),

                      // –ó–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É
                      _buildNotesCard(),
                      SizedBox(height: 16),

                      // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
                      _buildTotalCard(cartProvider),
                    ],
                  ),
                ),

                // –ö–Ω–æ–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                _buildCheckoutButton(cartProvider),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildUserInfoCard(User? user) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowLight,
            blurRadius: 10,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.person, color: AppColors.primaryLight),
              SizedBox(width: 8),
              Text(
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          Text(
            user?.fullName ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            style: TextStyle(fontSize: 16),
          ),
          SizedBox(height: 4),
          Text(
            user?.phone ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            style: TextStyle(fontSize: 14, color: Colors.grey[600]),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderDetailsCard(CartProvider cartProvider) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowLight,
            blurRadius: 10,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.shopping_basket, color: AppColors.primaryLight),
              SizedBox(width: 8),
              Text(
                '–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          ...cartProvider.itemsList.map((item) => Padding(
                padding: EdgeInsets.only(bottom: 8),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      child: Text(
                        '${item.quantity} x –¢–æ–≤–∞—Ä #${item.name}',
                        style: TextStyle(fontSize: 14),
                        maxLines: 2, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                        overflow: TextOverflow.ellipsis, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
                      ),
                    ),
                    Text(
                      '${(item.price * item.quantity).toStringAsFixed(0)} ‚ÇΩ',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ],
                ),
              )),
        ],
      ),
    );
  }

  Widget _buildNotesCard() {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowLight,
            blurRadius: 10,
            offset: Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.note, color: AppColors.primaryLight),
              SizedBox(width: 8),
              Text(
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          TextField(
            controller: _notesController,
            decoration: InputDecoration(
              hintText: '–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞ —á–∞—Å –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            maxLines: 3,
            onChanged: (value) => _notes = value,
          ),
        ],
      ),
    );
  }

  Widget _buildTotalCard(CartProvider cartProvider) {
    // –†–∞—Å—á–µ—Ç —Å—É–º–º
    final baseAmount = cartProvider.totalAmount;
    final marginAmount = baseAmount * (_marginPercent / 100);
    final totalWithMargin = baseAmount + marginAmount;

    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            AppColors.primaryLight.withOpacity(0.1),
            AppColors.aurora2.withOpacity(0.05),
          ],
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: AppColors.primaryLight.withOpacity(0.3),
          width: 2,
        ),
      ),
      child: _isLoadingMargin
          ? Center(
              child: Padding(
                padding: EdgeInsets.all(20),
                child: CircularProgressIndicator(),
              ),
            )
          : Column(
              children: [
                // –¢–æ–≤–∞—Ä—ã (–±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞)
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.shopping_basket,
                            color: AppColors.textSecondary, size: 18),
                        SizedBox(width: 8),
                        Text(
                          '–¢–æ–≤–∞—Ä—ã:',
                          style: TextStyle(
                            fontSize: 16,
                            color: AppColors.textSecondary,
                          ),
                        ),
                      ],
                    ),
                    Text(
                      '${baseAmount.toStringAsFixed(0)} ‚ÇΩ',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 12),

                // –£—Å–ª—É–≥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–º–∞—Ä–∂–∞)
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.local_shipping,
                            color: AppColors.textSecondary, size: 18),
                        SizedBox(width: 8),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '–£—Å–ª—É–≥–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:',
                              style: TextStyle(
                                fontSize: 16,
                                color: AppColors.textSecondary,
                              ),
                            ),
                            Text(
                              '(${_marginPercent.toStringAsFixed(0)}% –Ω–∞—Ü–µ–Ω–∫–∞)',
                              style: TextStyle(
                                fontSize: 12,
                                color: AppColors.textSecondary.withOpacity(0.7),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                    Text(
                      '${marginAmount.toStringAsFixed(0)} ‚ÇΩ',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: AppColors.aurora3,
                      ),
                    ),
                  ],
                ),

                Padding(
                  padding: EdgeInsets.symmetric(vertical: 12),
                  child: Divider(
                    color: AppColors.primaryLight.withOpacity(0.3),
                    thickness: 1,
                  ),
                ),

                // –ò–¢–û–ì–û –∫ –æ–ø–ª–∞—Ç–µ
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: AppColors.textPrimary,
                      ),
                    ),
                    Text(
                      '${totalWithMargin.toStringAsFixed(0)} ‚ÇΩ',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: AppColors.primaryLight,
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 8),

                // –ü–æ—è—Å–Ω–µ–Ω–∏–µ
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.info_outline,
                          color: Colors.blue.shade700, size: 16),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          '–ù–∞—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∑–∞–∫—É–ø–∫–∏',
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.blue.shade700,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildCheckoutButton(CartProvider cartProvider) {
    return Container(
      padding: EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowLight,
            blurRadius: 10,
            offset: Offset(0, -2),
          ),
        ],
      ),
      child: Container(
        width: double.infinity,
        height: 56,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          gradient: _isProcessing ? null : AppGradients.primary,
          color: _isProcessing ? Colors.grey[300] : null,
        ),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            borderRadius: BorderRadius.circular(16),
            onTap: _isProcessing ? null : _createOrder,
            child: Center(
              child: _isProcessing
                  ? SizedBox(
                      width: 24,
                      height: 24,
                      child: CircularProgressIndicator(
                        strokeWidth: 2.5,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                      ),
                    )
                  : Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.payment, color: Colors.white, size: 28),
                        SizedBox(width: 12),
                        Text(
                          '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ],
                    ),
            ),
          ),
        ),
      ),
    );
  }
}
